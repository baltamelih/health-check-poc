------------------------[SELECT Permission Check by Login - NULL Safe]------------------------

-- Drop local temp table if it already exists
IF OBJECT_ID('tempdb..#PermissionResults') IS NOT NULL
    DROP TABLE #PermissionResults;

-- Create local temp table to collect results from all databases
CREATE TABLE #PermissionResults (
    DatabaseName SYSNAME,
    DatabaseUser SYSNAME,
    ObjectName NVARCHAR(100),
    PermissionType NVARCHAR(100),
    PermissionState NVARCHAR(100),
    PermissionSource NVARCHAR(100)
);

-- Set the login name
DECLARE @LoginName SYSNAME = 'NT AUTHORITY\SYSTEM';
DECLARE @sql NVARCHAR(MAX) = '';
DECLARE @crlf NVARCHAR(2) = CHAR(13) + CHAR(10);

-- Build dynamic SQL for each database to insert into #PermissionResults
SELECT @sql += '
USE [' + name + '];' + @crlf + '

-- Insert direct SELECT permissions
INSERT INTO #PermissionResults
SELECT
    ISNULL(''' + name + ''', ''-1'') AS DatabaseName,
    ISNULL(u.name, ''-1'') AS DatabaseUser,
    ISNULL(o.name, ''-1'') AS ObjectName,
    ISNULL(p.permission_name, ''-1'') AS PermissionType,
    ISNULL(p.state_desc, ''-1'') AS PermissionState,
    ''Direct'' AS PermissionSource
FROM sys.database_principals u
JOIN sys.database_permissions p ON u.principal_id = p.grantee_principal_id
LEFT JOIN sys.objects o ON p.major_id = o.object_id
JOIN sys.server_principals sp ON sp.sid = u.sid
WHERE sp.name = ''' + @LoginName + ''' AND p.permission_name = ''SELECT'';

-- Insert SELECT via roles
INSERT INTO #PermissionResults
SELECT
    ISNULL(''' + name + ''', ''-1'') AS DatabaseName,
    ISNULL(u.name, ''-1'') AS DatabaseUser,
    ISNULL(o.name, ''-1'') AS ObjectName,
    ISNULL(p.permission_name, ''-1'') AS PermissionType,
    ISNULL(p.state_desc, ''-1'') AS PermissionState,
    ISNULL(r.name, ''-1'') AS PermissionSource
FROM sys.database_principals u
JOIN sys.database_role_members rm ON u.principal_id = rm.member_principal_id
JOIN sys.database_principals r ON rm.role_principal_id = r.principal_id
JOIN sys.database_permissions p ON r.principal_id = p.grantee_principal_id
LEFT JOIN sys.objects o ON p.major_id = o.object_id
JOIN sys.server_principals sp ON sp.sid = u.sid
WHERE sp.name = ''' + @LoginName + ''' AND p.permission_name = ''SELECT'';

-- Insert role membership even if no SELECT permission
INSERT INTO #PermissionResults
SELECT
    ISNULL(''' + name + ''', ''-1'') AS DatabaseName,
    ISNULL(u.name, ''-1'') AS DatabaseUser,
    ''-1'' AS ObjectName,
    ''Role Membership'' AS PermissionType,
    ''MEMBER'' AS PermissionState,
    ''Role: '' + ISNULL(r.name, ''-1'') AS PermissionSource
FROM sys.database_principals u
JOIN sys.database_role_members rm ON u.principal_id = rm.member_principal_id
JOIN sys.database_principals r ON rm.role_principal_id = r.principal_id
JOIN sys.server_principals sp ON sp.sid = u.sid
WHERE sp.name = ''' + @LoginName + ''';'
+ @crlf
FROM sys.databases
WHERE state_desc = 'ONLINE' AND name NOT IN ('tempdb');

-- Execute dynamic SQL to populate the local temp table
EXEC sp_executesql @sql;

-- Final SELECT from temp table
SELECT * FROM #PermissionResults;
