SECURITY_SCRIPT2_BASE64 = """SUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNBbHdheXNPbkluZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNBbHdheXNPbkluZm87DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNTZXJ2ZXJJbmZvJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjU2VydmVySW5mbzsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI1NlcnZlckNvbmZpZ3VyYXRpb24nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNTZXJ2ZXJDb25maWd1cmF0aW9uOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jVG90YWxNZW1vcnknKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNUb3RhbE1lbW9yeTsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI01pblNlcnZlck1lbW9yeScpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI01pblNlcnZlck1lbW9yeTsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI01heFNlcnZlck1lbW9yeScpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI01heFNlcnZlck1lbW9yeTsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0JhY2t1cENvbXByZXNzaW9uSW5mbycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0JhY2t1cENvbXByZXNzaW9uSW5mbzsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RhdGFiYXNlQ1BVVXNhZ2UnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYXRhYmFzZUNQVVVzYWdlOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jRGF0YWJhc2VGaWxlSW5mbycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0RhdGFiYXNlRmlsZUluZm87DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNCYWNrdXBEZXRhaWxzJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjQmFja3VwRGV0YWlsczsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RhdGFiYXNlU2l6ZUluZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYXRhYmFzZVNpemVJbmZvOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jRGJHcm93dGgnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYkdyb3d0aDsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RlYWRsb2NrUGVyZm9ybWFuY2UnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEZWFkbG9ja1BlcmZvcm1hbmNlOw0KRU5EDQoNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNEYXRhYmFzZVBhZ2VWZXJpZnlJbmZvJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjRGF0YWJhc2VQYWdlVmVyaWZ5SW5mbzsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RhdGFiYXNlQ29tcGF0aWJpbGl0eUluZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYXRhYmFzZUNvbXBhdGliaWxpdHlJbmZvOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jRGF0YWJhc2VBdXRvU2hyaW5rSW5mbycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0RhdGFiYXNlQXV0b1Nocmlua0luZm87DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNEYXRhYmFzZUF1dG9DbG9zZUluZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYXRhYmFzZUF1dG9DbG9zZUluZm87DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNEYXRhYmFzZUxvZ0luZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYXRhYmFzZUxvZ0luZm87DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNKb2JIaXN0b3J5JykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjSm9iSGlzdG9yeTsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI09SUEhBTlVTRVInKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNPUlBIQU5VU0VSOw0KRU5EDQoNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNFbXB0eVBhc3N3b3JkTG9naW5zJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjRW1wdHlQYXNzd29yZExvZ2luczsNCkVORA0KDQoNCg0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI1NlcnZlclByaW5jaXBhbHMnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNTZXJ2ZXJQcmluY2lwYWxzOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jU2VydmVyTGV2ZWxQZXJtaXNzaW9ucycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI1NlcnZlckxldmVsUGVybWlzc2lvbnM7DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNTZXJ2ZXJMb2dpbnMnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNTZXJ2ZXJMb2dpbnM7DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNEQkxldmVsUGVybWlzc2lvbnMnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEQkxldmVsUGVybWlzc2lvbnM7DQpFTkQNCg0KDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1BT19pbmZvcm1hdGlvbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KQ1JFQVRFIFRBQkxFICNBbHdheXNPbkluZm8gKA0KICAgIEF2YWlsYWJpbGl0eUdyb3VwTmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIFJlcGxpY2FTZXJ2ZXJOYW1lIE5WQVJDSEFSKDI1NSksDQogICAgQXZhaWxhYmlsaXR5TW9kZSBOVkFSQ0hBUigyNTUpLA0KICAgIEZhaWxvdmVyTW9kZSBOVkFSQ0hBUigyNTUpDQopOw0KDQotLSBBbHdheXMgT24ga29udHJvbHUNCklGIFNFUlZFUlBST1BFUlRZKCdJc0hhZHJFbmFibGVkJykgPSAxDQpCRUdJTg0KICAgIC0tIEFsd2F5cyBPbiBldGtpbnNlLCBBdmFpbGFiaWxpdHkgR3JvdXBzIHZlIFJlcGxpY2EgYmlsZ2lsZXJpbmkgdGFibG95YSBla2xlcg0KICAgIElOU0VSVCBJTlRPICNBbHdheXNPbkluZm8NCiAgICBTRUxFQ1QNCiAgICAgICAgYWcubmFtZSBBUyBbQXZhaWxhYmlsaXR5R3JvdXBOYW1lXSwNCiAgICAgICAgYXIucmVwbGljYV9zZXJ2ZXJfbmFtZSBBUyBbUmVwbGljYVNlcnZlck5hbWVdLA0KICAgICAgICBhci5hdmFpbGFiaWxpdHlfbW9kZV9kZXNjIEFTIFtBdmFpbGFiaWxpdHlNb2RlXSwNCiAgICAgICAgYXIuZmFpbG92ZXJfbW9kZV9kZXNjIEFTIFtGYWlsb3Zlck1vZGVdDQogICAgRlJPTQ0KICAgICAgICBzeXMuYXZhaWxhYmlsaXR5X2dyb3VwcyBhZw0KICAgIElOTkVSIEpPSU4NCiAgICAgICAgc3lzLmF2YWlsYWJpbGl0eV9yZXBsaWNhcyBhciBPTiBhZy5ncm91cF9pZCA9IGFyLmdyb3VwX2lkOw0KDQoNCkVORA0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXNlcnZlcmluZm8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNTZXJ2ZXJJbmZvJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjU2VydmVySW5mbzsNCkVORA0KDQpDUkVBVEUgVEFCTEUgI1NlcnZlckluZm8gKA0KICAgIFN1bnVjdSBOVkFSQ0hBUigyNTUpLA0KICAgIEVkaXRpb24gTlZBUkNIQVIoMjU1KSwNCiAgICBbVmVyc2lvbl0gTlZBUkNIQVIoMjU1KSwNCiAgICBDb2xsYXRpb24gTlZBUkNIQVIoMjU1KSwNCiAgICBDUFUgSU5ULA0KICAgIFtSQU0gKE1CKV0gSU5ULA0KICAgIENsdXN0ZXIgTlZBUkNIQVIoNTApLA0KICAgIEhBIE5WQVJDSEFSKDUwKSwNCiAgICBbU2FuYWwgU2VydmVyXSBOVkFSQ0hBUig1MCksDQogICAgT1MgTlZBUkNIQVIoMjU1KSwNCiAgICBbQ3VtdWxhdGl2ZSBVcGRhdGVdIE5WQVJDSEFSKDUwKSwNCiAgICBbU1FMIFZlcnNpb25dIE5WQVJDSEFSKDUwKQ0KKTsNCg0KREVDTEFSRSBAVmVyc2lvbiBJTlQ7DQpTRVQgQFZlcnNpb24gPSBDT05WRVJUKElOVCwgTEVGVChDT05WRVJUKFZBUkNIQVIsIFNFUlZFUlBST1BFUlRZKCdQcm9kdWN0VmVyc2lvbicpKSwgQ0hBUklOREVYKCcuJywgQ09OVkVSVChWQVJDSEFSLCBTRVJWRVJQUk9QRVJUWSgnUHJvZHVjdFZlcnNpb24nKSkpIC0gMSkpOw0KDQpJRiBAVmVyc2lvbiA+PSAxNCAtLSBTUUwgU2VydmVyIDIwMTcgdmUgc29ucmFzaQ0KQkVHSU4NCiAgICBJTlNFUlQgSU5UTyAjU2VydmVySW5mbw0KICAgIFNFTEVDVA0KICAgICAgICBDT05WRVJUKE5WQVJDSEFSKDI1NSksIFNFUlZFUlBST1BFUlRZKCdNYWNoaW5lTmFtZScpKSBBUyBbU3VudWN1XSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUigyNTUpLCBTRVJWRVJQUk9QRVJUWSgnRWRpdGlvbicpKSBBUyBbRWRpdGlvbl0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoMjU1KSwgU0VSVkVSUFJPUEVSVFkoJ1Byb2R1Y3RWZXJzaW9uJykpIEFTIFtWZXJzaW9uXSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUigyNTUpLCBTRVJWRVJQUk9QRVJUWSgnQ29sbGF0aW9uJykpIEFTIFtDb2xsYXRpb25dLA0KICAgICAgICBjcHVfY291bnQgQVMgW0NQVV0sDQogICAgICAgIHBoeXNpY2FsX21lbW9yeV9rYiAvIDEwMjQgQVMgW1JBTSAoTUIpXSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUig1MCksIFNFUlZFUlBST1BFUlRZKCdJc0NsdXN0ZXJlZCcpKSBBUyBbQ2x1c3Rlcl0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoNTApLCBTRVJWRVJQUk9QRVJUWSgnSXNIYWRyRW5hYmxlZCcpKSBBUyBbSEFdLA0KICAgICAgICBDQVNFDQogICAgICAgICAgICBXSEVOIEVYSVNUUyAoU0VMRUNUIDEgRlJPTSBzeXMuZG1fb3Nfc3lzX2luZm8gV0hFUkUgdmlydHVhbF9tYWNoaW5lX3R5cGVfZGVzYyA9ICdOT05FJykgVEhFTiAnTm8nDQogICAgICAgICAgICBFTFNFICdZZXMnDQogICAgICAgIEVORCBBUyBbU2FuYWwgU2VydmVyXSwNCiAgICAgICAgKFNFTEVDVCBUT1AgMSBob3N0X3BsYXRmb3JtIEZST00gc3lzLmRtX29zX2hvc3RfaW5mbykgQVMgW09TXSwNCiAgICAgICAgIENBU0UNCiAgICAgICAgIFdIRU4gQ09BTEVTQ0UoQ09OVkVSVCh2YXJjaGFyKDMwKSwgU0VSVkVSUFJPUEVSVFkoJ1Byb2R1Y3RVcGRhdGVMZXZlbCcpKSwgJycpIDw+ICcnDQogICAgICAgICAgICAgIFRIRU4gQ09OVkVSVCh2YXJjaGFyKDMwKSwgU0VSVkVSUFJPUEVSVFkoJ1Byb2R1Y3RVcGRhdGVMZXZlbCcpKSANCiAgICAgICAgIEVMU0UgJ1JUTScNCiAgICAgICBFTkQgQVMgW0N1bXVsYXRpdmUgVXBkYXRlXSwNCiAgICAgICAgIENBU0UNCiAgICAgICAgICAgIFdIRU4gQFZlcnNpb24gPSAxNiBUSEVOICdTUUwgU2VydmVyIDIwMjInDQogICAgICAgICAgICBXSEVOIEBWZXJzaW9uID0gMTUgVEhFTiAnU1FMIFNlcnZlciAyMDE5Jw0KICAgICAgICAgICAgV0hFTiBAVmVyc2lvbiA9IDE0IFRIRU4gJ1NRTCBTZXJ2ZXIgMjAxNycNCiAgICAgICAgICAgIEVMU0UgJ0JpbGlubWl5b3InDQogICAgICAgIEVORCBBUyBbU1FMIFZlcnNpb25dDQogICAgRlJPTSBzeXMuZG1fb3Nfc3lzX2luZm87DQoNCg0KDQpFTkQNCkVMU0UgLS0gU1FMIFNlcnZlciAyMDE2IHZlIG9uY2VzaQ0KQkVHSU4NCiAgICBJTlNFUlQgSU5UTyAjU2VydmVySW5mbw0KICAgIFNFTEVDVA0KICAgICAgICBDT05WRVJUKE5WQVJDSEFSKDI1NSksIFNFUlZFUlBST1BFUlRZKCdNYWNoaW5lTmFtZScpKSBBUyBbU3VudWN1XSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUigyNTUpLCBTRVJWRVJQUk9QRVJUWSgnRWRpdGlvbicpKSBBUyBbRWRpdGlvbl0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoMjU1KSwgU0VSVkVSUFJPUEVSVFkoJ1Byb2R1Y3RWZXJzaW9uJykpIEFTIFtWZXJzaW9uXSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUigyNTUpLCBTRVJWRVJQUk9QRVJUWSgnQ29sbGF0aW9uJykpIEFTIFtDb2xsYXRpb25dLA0KICAgICAgICBjcHVfY291bnQgQVMgW0NQVV0sDQogICAgICAgIHBoeXNpY2FsX21lbW9yeV9rYiAvIDEwMjQgQVMgW1JBTSAoTUIpXSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUig1MCksIFNFUlZFUlBST1BFUlRZKCdJc0NsdXN0ZXJlZCcpKSBBUyBbQ2x1c3Rlcl0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoNTApLCBTRVJWRVJQUk9QRVJUWSgnSXNIYWRyRW5hYmxlZCcpKSBBUyBbSEFdLA0KICAgICAgICAnVW5rbm93bicgQVMgW1NhbmFsIFNlcnZlcl0sDQogICAgICAgICdVbmtub3duJyBBUyBbT1NdLA0KICAgICAgICBDQVNFDQogICAgICAgICAgICBXSEVOIEBAVkVSU0lPTiBMSUtFICclQ1UlJyBUSEVODQogICAgICAgICAgICAgICAgJ0NVJyArIFNVQlNUUklORyhAQFZFUlNJT04sIENIQVJJTkRFWCgnQ1UnLCBAQFZFUlNJT04pICsgMiwgQ0hBUklOREVYKCcpJywgQEBWRVJTSU9OLCBDSEFSSU5ERVgoJ0NVJywgQEBWRVJTSU9OKSkgLSBDSEFSSU5ERVgoJ0NVJywgQEBWRVJTSU9OKSAtIDIpDQogICAgICAgICAgICBFTFNFICdSVE0nDQogICAgICAgIEVORCBBUyBbQ3VtdWxhdGl2ZSBVcGRhdGVdLA0KICAgICAgICBDQVNFDQogICAgICAgICAgICBXSEVOIEBWZXJzaW9uID0gMTMgVEhFTiAnU1FMIFNlcnZlciAyMDE2Jw0KICAgICAgICAgICAgV0hFTiBAVmVyc2lvbiA9IDEyIFRIRU4gJ1NRTCBTZXJ2ZXIgMjAxNCcNCiAgICAgICAgICAgIFdIRU4gQFZlcnNpb24gPSAxMSBUSEVOICdTUUwgU2VydmVyIDIwMTInDQogICAgICAgICAgICBXSEVOIEBWZXJzaW9uID0gMTAgVEhFTiAnU1FMIFNlcnZlciAyMDA4L1IyJw0KICAgICAgICAgICAgV0hFTiBAVmVyc2lvbiA9IDkgVEhFTiAnU1FMIFNlcnZlciAyMDA1Jw0KICAgICAgICAgICAgRUxTRSAnQmlsaW5taXlvcicNCiAgICAgICAgRU5EIEFTIFtTUUwgVmVyc2lvbl0NCiAgICBGUk9NIHN5cy5kbV9vc19zeXNfaW5mbzsNCg0KDQoNCkVORDsNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tY29uZmlndXJhdGlvbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpERUNMQVJFIEBBZHZhbmNlZE9wdGlvbnNFbmFibGVkIEJJVDsNCkRFQ0xBUkUgQEluaXRpYWxTZXR0aW5nIEJJVDsNCg0KLS0gJ3Nob3cgYWR2YW5jZWQgb3B0aW9ucycgYcOnxLFrIG3EsSBrb250cm9sIGV0DQpJRiBFWElTVFMgKFNFTEVDVCAqIEZST00gc3lzLmNvbmZpZ3VyYXRpb25zIFdIRVJFIG5hbWUgPSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJyBBTkQgdmFsdWVfaW5fdXNlID0gMSkNCkJFR0lODQogICAgU0VUIEBBZHZhbmNlZE9wdGlvbnNFbmFibGVkID0gMTsNCkVORA0KRUxTRQ0KQkVHSU4NCiAgICBTRVQgQEFkdmFuY2VkT3B0aW9uc0VuYWJsZWQgPSAwOw0KRU5EDQoNClNFVCBASW5pdGlhbFNldHRpbmcgPSBAQWR2YW5jZWRPcHRpb25zRW5hYmxlZDsNCg0KLS0gRcSfZXIga2FwYWzEsXlzYSBhw6cNCklGIEBBZHZhbmNlZE9wdGlvbnNFbmFibGVkID0gMA0KQkVHSU4NCiAgICAtLSBUcmFuc2FjdGlvbiBkxLHFn8SxbmRhIHNwX2NvbmZpZ3VyZSBrdWxsYW7EsW3EsQ0KICAgIEJFR0lOIFRSWQ0KICAgICAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMTsNCiAgICAgICAgUkVDT05GSUdVUkU7DQogICAgRU5EIFRSWQ0KICAgIEJFR0lOIENBVENIDQogICAgICAgIFBSSU5UICdzaG93IGFkdmFuY2VkIG9wdGlvbnMgYXlhcsSxIGHDp8SxbGFtYWTEsSEnOw0KICAgICAgICBSRVRVUk47DQogICAgRU5EIENBVENIDQpFTkQNCg0KLS0gVGVtcCB0YWJsbyBvbHXFn3R1cg0KDQoNCkNSRUFURSBUQUJMRSAjU2VydmVyQ29uZmlndXJhdGlvbiAoDQogICAgQ29uZmlnTmFtZSBOVkFSQ0hBUigxMDApLA0KICAgIENvbmZpZ1ZhbHVlIElOVA0KKTsNCg0KLS0gRGXEn2VybGVyaSB0ZW1wIHRhYmxveWEgeWF6DQpJTlNFUlQgSU5UTyAjU2VydmVyQ29uZmlndXJhdGlvbiAoQ29uZmlnTmFtZSwgQ29uZmlnVmFsdWUpDQpTRUxFQ1QgbmFtZSBBUyBDb25maWdOYW1lLCBDT05WRVJUKElOVCwgdmFsdWVfaW5fdXNlKSBBUyBDb25maWdWYWx1ZQ0KRlJPTSBzeXMuY29uZmlndXJhdGlvbnMNCldIRVJFIG5hbWUgSU4gKCdtYXggZGVncmVlIG9mIHBhcmFsbGVsaXNtJywgJ2Nvc3QgdGhyZXNob2xkIGZvciBwYXJhbGxlbGlzbScsICdvcHRpbWl6ZSBmb3IgYWQgaG9jIHdvcmtsb2FkcycpOw0KDQoNCg0KDQotLSBFxJ9lciBiYcWfbGFuZ8Sxw6d0YSBrYXBhbMSxeXNhIGdlcmkga2FwYXQNCklGIEBJbml0aWFsU2V0dGluZyA9IDANCkJFR0lODQogICAgLS0gVHJhbnNhY3Rpb24gZMSxxZ/EsW5kYSBzcF9jb25maWd1cmUga3VsbGFuxLFtxLENCiAgICBCRUdJTiBUUlkNCiAgICAgICAgRVhFQyBzcF9jb25maWd1cmUgJ3Nob3cgYWR2YW5jZWQgb3B0aW9ucycsIDA7DQogICAgICAgIFJFQ09ORklHVVJFOw0KICAgIEVORCBUUlkNCiAgICBCRUdJTiBDQVRDSA0KICAgICAgICBQUklOVCAnc2hvdyBhZHZhbmNlZCBvcHRpb25zIGF5YXLEsSBrYXBhdMSxbGFtYWTEsSEnOw0KICAgICAgICBSRVRVUk47DQogICAgRU5EIENBVENIDQpFTkQNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tbWF4LW1pbk1lbW9yeS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCkRFQ0xBUkUgQHhwQ21kU2hlbGxFbmFibGVkIEJJVDsNCg0KDQotLSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJyBhw6fEsWsgbcSxIGtvbnRyb2wgZXQNCklGIEVYSVNUUyAoU0VMRUNUICogRlJPTSBzeXMuY29uZmlndXJhdGlvbnMgV0hFUkUgbmFtZSA9ICdzaG93IGFkdmFuY2VkIG9wdGlvbnMnIEFORCB2YWx1ZV9pbl91c2UgPSAxKQ0KQkVHSU4NCiAgICBTRVQgQEFkdmFuY2VkT3B0aW9uc0VuYWJsZWQgPSAxOw0KRU5EDQpFTFNFDQpCRUdJTg0KICAgIFNFVCBAQWR2YW5jZWRPcHRpb25zRW5hYmxlZCA9IDA7DQpFTkQNCg0KU0VUIEBJbml0aWFsU2V0dGluZyA9IEBBZHZhbmNlZE9wdGlvbnNFbmFibGVkOw0KDQotLSBFxJ9lciBrYXBhbMSxeXNhIGHDpyAodHJhbnNhY3Rpb24gZMSxxZ/EsW5hIGFsxLFuZMSxKQ0KSUYgQEFkdmFuY2VkT3B0aW9uc0VuYWJsZWQgPSAwDQpCRUdJTg0KICAgIEJFR0lOIFRSWQ0KICAgICAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMTsNCiAgICAgICAgUkVDT05GSUdVUkU7DQogICAgRU5EIFRSWQ0KICAgIEJFR0lOIENBVENIDQogICAgICAgIFBSSU5UICdzaG93IGFkdmFuY2VkIG9wdGlvbnMgYcOnxLFsxLFya2VuIGhhdGEgb2x1xZ90dS4nOw0KICAgICAgICBSRVRVUk47DQogICAgRU5EIENBVENIDQpFTkQNCg0KLS0gVG9wbGFtIGJlbGxlayBpw6dpbiB0ZW1wIHRhYmxvIG9sdcWfdHVyDQoNCg0KQ1JFQVRFIFRBQkxFICNUb3RhbE1lbW9yeSAoDQogICAgVG90YWxNZW1vcnlfTUIgSU5UDQopOw0KDQpJTlNFUlQgSU5UTyAjVG90YWxNZW1vcnkNClNFTEVDVCBwaHlzaWNhbF9tZW1vcnlfa2IgLyAxMDI0IEFTIFRvdGFsTWVtb3J5X01CIC0tIFRvcGxhbSBSQU0gKE1CKQ0KRlJPTSBzeXMuZG1fb3Nfc3lzX2luZm87DQoNCi0tIE1pbmltdW0gYmVsbGVrIHlhcMSxbGFuZMSxcm1hIHRhYmxvc3Ugb2x1xZ90dXINCg0KQ1JFQVRFIFRBQkxFICNNaW5TZXJ2ZXJNZW1vcnkgKA0KICAgIG5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBtaW5pbXVtIElOVCwNCiAgICBtYXhpbXVtIElOVCwNCiAgICBjb25maWdfdmFsdWUgSU5ULA0KICAgIHJ1bl92YWx1ZSBJTlQNCik7DQoNCklOU0VSVCBJTlRPICNNaW5TZXJ2ZXJNZW1vcnkNCkVYRUMgc3BfY29uZmlndXJlICdtaW4gc2VydmVyIG1lbW9yeSc7DQoNCg0KDQpDUkVBVEUgVEFCTEUgI01heFNlcnZlck1lbW9yeSAoDQogICAgbmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIG1pbmltdW0gSU5ULA0KICAgIG1heGltdW0gSU5ULA0KICAgIGNvbmZpZ192YWx1ZSBJTlQsDQogICAgcnVuX3ZhbHVlIElOVA0KKTsNCg0KSU5TRVJUIElOVE8gI01heFNlcnZlck1lbW9yeQ0KRVhFQyBzcF9jb25maWd1cmUgJ21heCBzZXJ2ZXIgbWVtb3J5JzsNCg0KLS0gRcSfZXIgYmHFn2xhbmfEscOndGEga2FwYWzEsXlzYSBnZXJpIGthcGF0ICh0cmFuc2FjdGlvbiBkxLHFn8SxbmEgYWzEsW5kxLEpDQpJRiBASW5pdGlhbFNldHRpbmcgPSAwDQpCRUdJTg0KICAgIEJFR0lOIFRSWQ0KICAgICAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMDsNCiAgICAgICAgUkVDT05GSUdVUkU7DQogICAgRU5EIFRSWQ0KICAgIEJFR0lOIENBVENIDQogICAgICAgIFBSSU5UICdzaG93IGFkdmFuY2VkIG9wdGlvbnMga2FwYXTEsWzEsXJrZW4gaGF0YSBvbHXFn3R1Lic7DQogICAgICAgIFJFVFVSTjsNCiAgICBFTkQgQ0FUQ0gNCkVORA0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYmFja3VwQ29tcHJlc3Npb24tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgdGVtcG9yYXJ5IHRhYmxlIGZvciBiYWNrdXAgY29tcHJlc3Npb24gaW5mb3JtYXRpb24NCkNSRUFURSBUQUJMRSAjQmFja3VwQ29tcHJlc3Npb25JbmZvICgNCiAgICBDb25maWd1cmF0aW9uTmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIENvbmZpZ3VyZWRWYWx1ZSBOVkFSQ0hBUigyNTUpLA0KICAgIENvbXByZXNzaW9uQmFja3VwIE5WQVJDSEFSKDI1NSksDQogICAgRGVzY3JpcHRpb24gTlZBUkNIQVIoTUFYKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjQmFja3VwQ29tcHJlc3Npb25JbmZvDQpTRUxFQ1QNCiAgICBuYW1lIEFTIENvbmZpZ3VyYXRpb25OYW1lLA0KICAgIENPTlZFUlQoTlZBUkNIQVIoMjU1KSwgdmFsdWUpIEFTIENvbmZpZ3VyZWRWYWx1ZSwNCiAgICBDT05WRVJUKE5WQVJDSEFSKDI1NSksIHZhbHVlX2luX3VzZSkgQVMgQ29tcHJlc3Npb25CYWNrdXAsDQogICAgZGVzY3JpcHRpb24NCkZST00NCiAgICBzeXMuY29uZmlndXJhdGlvbnMNCldIRVJFDQogICAgbmFtZSA9ICdiYWNrdXAgY29tcHJlc3Npb24gZGVmYXVsdCc7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQ1BVdXRpbGl6YXRpb24tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENyZWF0ZSB0ZW1wb3JhcnkgdGFibGUgZm9yIENQVSB1dGlsaXphdGlvbiBieSBkYXRhYmFzZQ0KQ1JFQVRFIFRBQkxFICNEYXRhYmFzZUNQVVVzYWdlICgNCiAgICBbQ1BVIFJhbmtdIElOVCwNCiAgICBbRGF0YWJhc2UgTmFtZV0gTlZBUkNIQVIoMTI4KSwNCiAgICBbQ1BVIFRpbWUgKG1zKV0gQklHSU5ULA0KICAgIFtDUFUgUGVyY2VudF0gREVDSU1BTCg1LCAyKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQo7V0lUSCBEQl9DUFVfU3RhdHMgQVMNCigNCiAgICBTRUxFQ1QNCiAgICAgICAgcGEuRGF0YWJhc2VJRCwNCiAgICAgICAgREJfTmFtZShwYS5EYXRhYmFzZUlEKSBBUyBbRGF0YWJhc2UgTmFtZV0sDQogICAgICAgIFNVTShxcy50b3RhbF93b3JrZXJfdGltZSAvIDEwMDApIEFTIFtDUFVfVGltZV9Nc10NCiAgICBGUk9NIHN5cy5kbV9leGVjX3F1ZXJ5X3N0YXRzIEFTIHFzIFdJVEggKE5PTE9DSykNCiAgICBDUk9TUyBBUFBMWQ0KICAgICgNCiAgICAgICAgU0VMRUNUIENPTlZFUlQoSU5ULCB2YWx1ZSkgQVMgW0RhdGFiYXNlSURdDQogICAgICAgIEZST00gc3lzLmRtX2V4ZWNfcGxhbl9hdHRyaWJ1dGVzKHFzLnBsYW5faGFuZGxlKQ0KICAgICAgICBXSEVSRSBhdHRyaWJ1dGUgPSBOJ2RiaWQnDQogICAgKSBBUyBwYQ0KICAgIEdST1VQIEJZIHBhLkRhdGFiYXNlSUQNCikNCklOU0VSVCBJTlRPICNEYXRhYmFzZUNQVVVzYWdlDQpTRUxFQ1QNCiAgICBST1dfTlVNQkVSKCkgT1ZFUihPUkRFUiBCWSBbQ1BVX1RpbWVfTXNdIERFU0MpIEFTIFtDUFUgUmFua10sDQogICAgW0RhdGFiYXNlIE5hbWVdLA0KICAgIFtDUFVfVGltZV9Nc10gQVMgW0NQVSBUaW1lIChtcyldLA0KICAgIENBU1QoW0NQVV9UaW1lX01zXSAqIDEuMCAvIFNVTShbQ1BVX1RpbWVfTXNdKSBPVkVSKCkgKiAxMDAuMCBBUyBERUNJTUFMKDUsIDIpKSBBUyBbQ1BVIFBlcmNlbnRdDQpGUk9NIERCX0NQVV9TdGF0cw0KV0hFUkUgRGF0YWJhc2VJRCA8PiAzMjc2NyAtLSBFeGNsdWRlIFJlc291cmNlREINCk9SREVSIEJZIFtDUFUgUmFua10gT1BUSU9OIChSRUNPTVBJTEUpOw0KDQoNCg0KLS0gSWRlbnRpZnkgdGhlIGRhdGFiYXNlIHdpdGggdGhlIGhpZ2hlc3QgQ1BVIHV0aWxpemF0aW9uDQpERUNMQVJFIEBUYXJnZXREYXRhYmFzZSBOVkFSQ0hBUigxMjgpOw0KO1dJVEggREJfQ1BVX1N0YXRzIEFTDQooDQogICAgU0VMRUNUDQogICAgICAgIHBhLkRhdGFiYXNlSUQsDQogICAgICAgIERCX05hbWUocGEuRGF0YWJhc2VJRCkgQVMgW0RhdGFiYXNlIE5hbWVdLA0KICAgICAgICBTVU0ocXMudG90YWxfd29ya2VyX3RpbWUgLyAxMDAwKSBBUyBbQ1BVX1RpbWVfTXNdDQogICAgRlJPTSBzeXMuZG1fZXhlY19xdWVyeV9zdGF0cyBBUyBxcyBXSVRIIChOT0xPQ0spDQogICAgQ1JPU1MgQVBQTFkNCiAgICAoDQogICAgICAgIFNFTEVDVCBDT05WRVJUKElOVCwgdmFsdWUpIEFTIFtEYXRhYmFzZUlEXQ0KICAgICAgICBGUk9NIHN5cy5kbV9leGVjX3BsYW5fYXR0cmlidXRlcyhxcy5wbGFuX2hhbmRsZSkNCiAgICAgICAgV0hFUkUgYXR0cmlidXRlID0gTidkYmlkJw0KICAgICkgQVMgcGENCiAgICBHUk9VUCBCWSBwYS5EYXRhYmFzZUlEDQopDQpTRUxFQ1QgVE9QIDEgQFRhcmdldERhdGFiYXNlID0gW0RhdGFiYXNlIE5hbWVdDQpGUk9NIERCX0NQVV9TdGF0cw0KV0hFUkUgRGF0YWJhc2VJRCA8PiAzMjc2NyAtLSBFeGNsdWRlIFJlc291cmNlREINCk9SREVSIEJZIFtDUFVfVGltZV9Nc10gREVTQzsNCg0KLS0gUHJpbnQgdGhlIG5hbWUgb2YgdGhlIHRhcmdldCBkYXRhYmFzZSBmb3IgbW9uaXRvcmluZw0KUFJJTlQgJ1RhcmdldCBEYXRhYmFzZTogJyArIElTTlVMTChAVGFyZ2V0RGF0YWJhc2UsICdObyB0YXJnZXQgZGF0YWJhc2UgZm91bmQuJyk7DQoNCi0tIFN0b3Agc2NyaXB0IGV4ZWN1dGlvbiBpZiBubyBkYXRhYmFzZSBpcyBmb3VuZA0KSUYgQFRhcmdldERhdGFiYXNlIElTIE5VTEwNCkJFR0lODQogICAgUFJJTlQgJ05vIHRhcmdldCBkYXRhYmFzZSBmb3VuZC4gRXhpdGluZyBzY3JpcHQuJzsNCiAgICBSRVRVUk47DQpFTkQ7DQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1EYXRhYmFzZSBGaWxlIFBhdGhzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBEcm9wIHRoZSB0YWJsZSBpZiBpdCBhbHJlYWR5IGV4aXN0cw0KDQoNCi0tIENyZWF0ZSBhIHRlbXBvcmFyeSB0YWJsZSBmb3IgZGF0YWJhc2UgZmlsZSBpbmZvcm1hdGlvbg0KQ1JFQVRFIFRBQkxFICNEYXRhYmFzZUZpbGVJbmZvICgNCiAgICBbRGF0YWJhc2UgTmFtZV0gTlZBUkNIQVIoMjU1KSwNCiAgICBbZmlsZV9pZF0gSU5ULA0KICAgIFtuYW1lXSBOVkFSQ0hBUigyNTUpLA0KICAgIHBoeXNpY2FsX25hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBbdHlwZV9kZXNjXSBOVkFSQ0hBUig1MCksDQogICAgc3RhdGVfZGVzYyBOVkFSQ0hBUig1MCksDQogICAgaXNfcGVyY2VudF9ncm93dGggQklULA0KICAgIGdyb3d0aCBJTlQsDQogICAgW0dyb3d0aCBpbiBNQl0gQklHSU5ULA0KICAgIFtUb3RhbCBTaXplIGluIE1CXSBCSUdJTlQsDQogICAgbWF4X3NpemUgQklHSU5UDQopOw0KDQotLSBJbnNlcnQgZGF0YSBpbnRvIHRoZSB0ZW1wb3JhcnkgdGFibGUNCklOU0VSVCBJTlRPICNEYXRhYmFzZUZpbGVJbmZvDQpTRUxFQ1QNCiAgICBEQl9OQU1FKFtkYXRhYmFzZV9pZF0pIEFTIFtEYXRhYmFzZSBOYW1lXSwNCiAgICBbZmlsZV9pZF0sIFtuYW1lXSwgcGh5c2ljYWxfbmFtZSwgW3R5cGVfZGVzY10sIHN0YXRlX2Rlc2MsDQogICAgaXNfcGVyY2VudF9ncm93dGgsIGdyb3d0aCwNCiAgICBDT05WRVJUKEJJR0lOVCwgZ3Jvd3RoIC8gMTI4LjApIEFTIFtHcm93dGggaW4gTUJdLA0KICAgIENPTlZFUlQoQklHSU5ULCBzaXplIC8gMTI4LjApIEFTIFtUb3RhbCBTaXplIGluIE1CXSwgbWF4X3NpemUNCkZST00gc3lzLm1hc3Rlcl9maWxlcyBXSVRIIChOT0xPQ0spDQpPUkRFUiBCWSBEQl9OQU1FKFtkYXRhYmFzZV9pZF0pLCBbZmlsZV9pZF0gT1BUSU9OIChSRUNPTVBJTEUpOw0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQmFja3VwIGhpc3RvcnktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLS0gQ3JlYXRlIGEgdGVtcG9yYXJ5IHRhYmxlIGZvciBiYWNrdXAgZGV0YWlscw0KQ1JFQVRFIFRBQkxFICNCYWNrdXBEZXRhaWxzICgNCiAgICBTZXJ2ZXIgTlZBUkNIQVIoMTAwKSwNCiAgICBkYXRhYmFzZV9uYW1lIE5WQVJDSEFSKDI1NSksDQogICAgYmFja3VwX3N0YXJ0X2RhdGUgREFURVRJTUUsDQogICAgYmFja3VwX2ZpbmlzaF9kYXRlIERBVEVUSU1FLA0KICAgIGV4cGlyYXRpb25fZGF0ZSBEQVRFVElNRSwNCiAgICBiYWNrdXBfdHlwZSBOVkFSQ0hBUig1MCksDQogICAgW0JhY2t1cCBTaXplIGluIE1CXSBOVkFSQ0hBUig1MCksDQogICAgW0NvbXAgU2l6ZSBpbiBNQl0gTlZBUkNIQVIoNTApLA0KICAgIGxvZ2ljYWxfZGV2aWNlX25hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBwaHlzaWNhbF9kZXZpY2VfbmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIGJhY2t1cHNldF9uYW1lIE5WQVJDSEFSKDI1NSksDQogICAgZGVzY3JpcHRpb24gTlZBUkNIQVIoTUFYKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjQmFja3VwRGV0YWlscw0KU0VMRUNUDQogICAgQ09OVkVSVChDSEFSKDEwMCksIFNFUlZFUlBST1BFUlRZKCdTZXJ2ZXJuYW1lJykpIEFTIFNlcnZlciwNCiAgICBicy5kYXRhYmFzZV9uYW1lLA0KICAgIGJzLmJhY2t1cF9zdGFydF9kYXRlLA0KICAgIGJzLmJhY2t1cF9maW5pc2hfZGF0ZSwNCiAgICBicy5leHBpcmF0aW9uX2RhdGUsDQogICAgQ0FTRSBicy50eXBlDQogICAgICAgIFdIRU4gJ0QnIFRIRU4gJ0Z1bGwgRGF0YWJhc2UnDQogICAgICAgIFdIRU4gJ0wnIFRIRU4gJ0xvZycNCiAgICAgICAgV0hFTiAnSScgVEhFTiAnRGlmZmVyZW50aWFsJw0KICAgICAgICBXSEVOICdGJyBUSEVOICdGaWxlIExldmVsJw0KICAgICAgICBXSEVOICdHJyBUSEVOICdGaWxlIExldmVsIERpZmZlcmVudGlhbCcNCiAgICAgICAgV0hFTiAnUCcgVEhFTiAnUGFydGlhbCcNCiAgICAgICAgV0hFTiAnUScgVEhFTiAnRGlmZmVyZW50aWFsIHBhcnRpYWwnDQogICAgRU5EIEFTIGJhY2t1cF90eXBlLA0KICAgIENPTlZFUlQoVkFSQ0hBUiwgQ0FTVChicy5iYWNrdXBfc2l6ZSAvIDEwMjQgLyAxMDI0IEFTIE1PTkVZKSwgMTApIEFTIFtCYWNrdXAgU2l6ZSBpbiBNQl0sDQogICAgQ09OVkVSVChWQVJDSEFSLCBDQVNUKGJzLmNvbXByZXNzZWRfYmFja3VwX3NpemUgLyAxMDI0IC8gMTAyNCBBUyBNT05FWSksIDEwKSBBUyBbQ29tcCBTaXplIGluIE1CXSwNCiAgICBibWYubG9naWNhbF9kZXZpY2VfbmFtZSwNCiAgICBibWYucGh5c2ljYWxfZGV2aWNlX25hbWUsDQogICAgYnMubmFtZSBBUyBiYWNrdXBzZXRfbmFtZSwNCiAgICBicy5kZXNjcmlwdGlvbg0KRlJPTSBtc2RiLmRiby5iYWNrdXBtZWRpYWZhbWlseSBibWYNCklOTkVSIEpPSU4gbXNkYi5kYm8uYmFja3Vwc2V0IGJzIE9OIGJtZi5tZWRpYV9zZXRfaWQgPSBicy5tZWRpYV9zZXRfaWQNCldIRVJFIChDT05WRVJUKERBVEVUSU1FLCBicy5iYWNrdXBfc3RhcnRfZGF0ZSwgMTAyKSA+PSBHRVREQVRFKCkgLSAxMCkNCk9SREVSIEJZDQogICAgYnMuZGF0YWJhc2VfbmFtZSwNCiAgICBicy5iYWNrdXBfZmluaXNoX2RhdGU7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1EYXRhYmFzZVNpemUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENyZWF0ZSBhIHRlbXBvcmFyeSB0YWJsZSBmb3IgZGF0YWJhc2Ugc2l6ZSBpbmZvcm1hdGlvbg0KQ1JFQVRFIFRBQkxFICNEYXRhYmFzZVNpemVJbmZvICgNCiAgICBEYXRhYmFzZU5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBMb2dTaXplR0IgREVDSU1BTCgxOCwgMiksDQogICAgVG90YWxTaXplR0IgREVDSU1BTCgxOCwgMikNCik7DQoNCi0tIEluc2VydCBkYXRhIGludG8gdGhlIHRlbXBvcmFyeSB0YWJsZQ0KSU5TRVJUIElOVE8gI0RhdGFiYXNlU2l6ZUluZm8NClNFTEVDVA0KICAgIERhdGFiYXNlTmFtZSA9IERCX05BTUUoZGF0YWJhc2VfaWQpLA0KICAgIExvZ1NpemVHQiA9IENBU1QoU1VNKENBU0UgV0hFTiB0eXBlX2Rlc2MgPSAnTE9HJyBUSEVOIHNpemUgRU5EKSAqIDguIC8gMTAyNCAvIDEwMjQgQVMgREVDSU1BTCgxOCwgMikpLA0KICAgIFRvdGFsU2l6ZUdCID0gQ0FTVChTVU0oc2l6ZSkgKiA4LiAvIDEwMjQgLyAxMDI0IEFTIERFQ0lNQUwoMTgsIDIpKQ0KRlJPTSBzeXMubWFzdGVyX2ZpbGVzIFdJVEggKE5PTE9DSykNCldIRVJFIGRhdGFiYXNlX2lkID4gNA0KR1JPVVAgQlkgZGF0YWJhc2VfaWQNCk9SREVSIEJZIFRvdGFsU2l6ZUdCIERFU0M7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1CdXl1bWUgT3Jhbmxhci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpERUNMQVJFIEBzdGFydERhdGUgREFURVRJTUU7DQpTRVQgQHN0YXJ0RGF0ZSA9IEdFVERBVEUoKTsNCg0KLS0gQ3JlYXRlIGEgdGVtcG9yYXJ5IHRhYmxlIGZvciBiYWNrdXAgZ3Jvd3RoIHN0YXRpc3RpY3MNCkNSRUFURSBUQUJMRSAjRGJHcm93dGggKA0KICAgIERhdGFiYXNlTmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIFswXSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLTFdIE5VTUVSSUMoMTAsIDEpLA0KICAgIFstMl0gTlVNRVJJQygxMCwgMSksDQogICAgWy0zXSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLTRdIE5VTUVSSUMoMTAsIDEpLA0KICAgIFstNV0gTlVNRVJJQygxMCwgMSksDQogICAgWy02XSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLTddIE5VTUVSSUMoMTAsIDEpLA0KICAgIFstOF0gTlVNRVJJQygxMCwgMSksDQogICAgWy05XSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLTEwXSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLTExXSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLTEyXSBOVU1FUklDKDEwLCAxKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjRGJHcm93dGgNClNFTEVDVCBQVlQuRGF0YWJhc2VOYW1lLA0KICAgICAgIElTTlVMTChQVlQuWzBdLCAwKSBBUyBbMF0sDQogICAgICAgSVNOVUxMKFBWVC5bLTFdLCAwKSBBUyBbLTFdLA0KICAgICAgIElTTlVMTChQVlQuWy0yXSwgMCkgQVMgWy0yXSwNCiAgICAgICBJU05VTEwoUFZULlstM10sIDApIEFTIFstM10sDQogICAgICAgSVNOVUxMKFBWVC5bLTRdLCAwKSBBUyBbLTRdLA0KICAgICAgIElTTlVMTChQVlQuWy01XSwgMCkgQVMgWy01XSwNCiAgICAgICBJU05VTEwoUFZULlstNl0sIDApIEFTIFstNl0sDQogICAgICAgSVNOVUxMKFBWVC5bLTddLCAwKSBBUyBbLTddLA0KICAgICAgIElTTlVMTChQVlQuWy04XSwgMCkgQVMgWy04XSwNCiAgICAgICBJU05VTEwoUFZULlstOV0sIDApIEFTIFstOV0sDQogICAgICAgSVNOVUxMKFBWVC5bLTEwXSwgMCkgQVMgWy0xMF0sDQogICAgICAgSVNOVUxMKFBWVC5bLTExXSwgMCkgQVMgWy0xMV0sDQogICAgICAgSVNOVUxMKFBWVC5bLTEyXSwgMCkgQVMgWy0xMl0NCkZST00NCiAgIChTRUxFQ1QgQlMuZGF0YWJhc2VfbmFtZSBBUyBEYXRhYmFzZU5hbWUsDQogICAgICAgICAgREFURURJRkYobW0sIEBzdGFydERhdGUsIEJTLmJhY2t1cF9zdGFydF9kYXRlKSBBUyBNb250aHNBZ28sDQogICAgICAgICAgQ09OVkVSVChOVU1FUklDKDEwLCAxKSwgQVZHKEJGLmZpbGVfc2l6ZSAvIDEwNDg1NzYuMCkpIEFTIEF2Z1NpemVNQg0KICAgIEZST00gbXNkYi5kYm8uYmFja3Vwc2V0IEFTIEJTDQogICAgSU5ORVIgSk9JTiBtc2RiLmRiby5iYWNrdXBmaWxlIEFTIEJGDQogICAgICAgIE9OIEJTLmJhY2t1cF9zZXRfaWQgPSBCRi5iYWNrdXBfc2V0X2lkDQogICAgV0hFUkUgTk9UIEJTLmRhdGFiYXNlX25hbWUgSU4gKCdtYXN0ZXInLCAnbXNkYicsICdtb2RlbCcsICd0ZW1wZGInKQ0KICAgICAgQU5EIEJGLltmaWxlX3R5cGVdID0gJ0QnDQogICAgICBBTkQgQlMuYmFja3VwX3N0YXJ0X2RhdGUgQkVUV0VFTiBEQVRFQUREKHl5LCAtMSwgQHN0YXJ0RGF0ZSkgQU5EIEBzdGFydERhdGUNCiAgICBHUk9VUCBCWSBCUy5kYXRhYmFzZV9uYW1lLCBEQVRFRElGRihtbSwgQHN0YXJ0RGF0ZSwgQlMuYmFja3VwX3N0YXJ0X2RhdGUpDQogICAgKSBBUyBCQ0tTVEFUDQpQSVZPVCAoU1VNKEJDS1NUQVQuQXZnU2l6ZU1CKQ0KICAgICAgIEZPUiBCQ0tTVEFULk1vbnRoc0FnbyBJTiAoWzBdLCBbLTFdLCBbLTJdLCBbLTNdLCBbLTRdLCBbLTVdLCBbLTZdLCBbLTddLCBbLThdLCBbLTldLCBbLTEwXSwgWy0xMV0sIFstMTJdKQ0KICAgICAgKSBBUyBQVlQ7DQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tRGVhZGxvY2stLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENyZWF0ZSBhIHRlbXBvcmFyeSB0YWJsZSBmb3IgZGVhZGxvY2sgcGVyZm9ybWFuY2Ugc3RhdGlzdGljcw0KQ1JFQVRFIFRBQkxFICNEZWFkbG9ja1BlcmZvcm1hbmNlICgNCiAgICBvYmplY3RfbmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIGNvdW50ZXJfbmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIENvdW50ZXJWYWx1ZV9Ub3RhbCBCSUdJTlQsDQogICAgQ291bnRlclZhbHVlX1Blcl9TZWMgRkxPQVQsDQogICAgQ291bnRlclZhbHVlX1Blcl9EYXkgRkxPQVQsDQogICAgVXBUaW1lX1NlYyBCSUdJTlQsDQogICAgVXBUaW1lX0RheSBGTE9BVA0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjRGVhZGxvY2tQZXJmb3JtYW5jZQ0KU0VMRUNUDQogICAgcGMub2JqZWN0X25hbWUsDQogICAgcGMuY291bnRlcl9uYW1lLA0KICAgIHBjLmNudHJfdmFsdWUgQVMgQ291bnRlclZhbHVlX1RvdGFsLA0KICAgIHBjLmNudHJfdmFsdWUgKiAwLjEgLyB1dC5VcFRpbWVTZWMgQVMgQ291bnRlclZhbHVlX1Blcl9TZWMsDQogICAgcGMuY250cl92YWx1ZSAqIDM2MDAuICogMjQgLyB1dC5VcFRpbWVTZWMgQVMgQ291bnRlclZhbHVlX1Blcl9EYXksDQogICAgdXQuVXBUaW1lU2VjIEFTIFVwVGltZV9TZWMsDQogICAgdXQuVXBUaW1lU2VjIC8gMzYwMC4gLyAyNCBBUyBVcFRpbWVfRGF5DQpGUk9NIHN5cy5kbV9vc19wZXJmb3JtYW5jZV9jb3VudGVycyBwYw0KQ1JPU1MgSk9JTiAoDQogICAgU0VMRUNUIERBVEVESUZGKFNFQ09ORCwgc3Fsc2VydmVyX3N0YXJ0X3RpbWUsIENVUlJFTlRfVElNRVNUQU1QKSBBUyBVcFRpbWVTZWMNCiAgICBGUk9NIHN5cy5kbV9vc19zeXNfaW5mbw0KKSB1dA0KV0hFUkUgcGMuY291bnRlcl9uYW1lID0gJ051bWJlciBvZiBEZWFkbG9ja3Mvc2VjJyBBTkQgcGMuaW5zdGFuY2VfbmFtZSA9ICdfVG90YWwnOw0KDQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQ0hFQ0tEQi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVtQYWdlIFZlcmlmeSBPcHRpb25dLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENyZWF0ZSB0ZW1wb3JhcnkgdGFibGUgZm9yIFBhZ2UgVmVyaWZ5IE9wdGlvbg0KQ1JFQVRFIFRBQkxFICNEYXRhYmFzZVBhZ2VWZXJpZnlJbmZvICgNCiAgICBbRGF0YWJhc2UgTmFtZV0gTlZBUkNIQVIoMjU1KSwNCiAgICBbUGFnZSBWZXJpZnkgT3B0aW9uXSBOVkFSQ0hBUigyNTUpDQopOw0KDQotLSBJbnNlcnQgZGF0YSBpbnRvIHRoZSB0ZW1wb3JhcnkgdGFibGUNCklOU0VSVCBJTlRPICNEYXRhYmFzZVBhZ2VWZXJpZnlJbmZvDQpTRUxFQ1QNCiAgICBkYi5bbmFtZV0gQVMgW0RhdGFiYXNlIE5hbWVdLA0KICAgIGRiLnBhZ2VfdmVyaWZ5X29wdGlvbl9kZXNjIEFTIFtQYWdlIFZlcmlmeSBPcHRpb25dDQpGUk9NIHN5cy5kYXRhYmFzZXMgQVMgZGIgV0lUSCAoTk9MT0NLKQ0KT1JERVIgQlkgZGIuW25hbWVdIE9QVElPTiAoUkVDT01QSUxFKTsNCg0KDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVtEQiBDb21wYXRpYmlsaXR5IExldmVsXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgdGVtcG9yYXJ5IHRhYmxlIGZvciBDb21wYXRpYmlsaXR5IExldmVsDQpDUkVBVEUgVEFCTEUgI0RhdGFiYXNlQ29tcGF0aWJpbGl0eUluZm8gKA0KICAgIFtEYXRhYmFzZSBOYW1lXSBOVkFSQ0hBUigyNTUpLA0KICAgIFtEQiBDb21wYXRpYmlsaXR5IExldmVsXSBJTlQNCik7DQoNCi0tIEluc2VydCBkYXRhIGludG8gdGhlIHRlbXBvcmFyeSB0YWJsZQ0KSU5TRVJUIElOVE8gI0RhdGFiYXNlQ29tcGF0aWJpbGl0eUluZm8NClNFTEVDVA0KICAgIGRiLltuYW1lXSBBUyBbRGF0YWJhc2UgTmFtZV0sDQogICAgZGIuW2NvbXBhdGliaWxpdHlfbGV2ZWxdIEFTIFtEQiBDb21wYXRpYmlsaXR5IExldmVsXQ0KRlJPTSBzeXMuZGF0YWJhc2VzIEFTIGRiIFdJVEggKE5PTE9DSykNCk9SREVSIEJZIGRiLltuYW1lXSBPUFRJT04gKFJFQ09NUElMRSk7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1pc19hdXRvX3Nocmlua19vbi0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgdGVtcG9yYXJ5IHRhYmxlIGZvciBBdXRvIFNocmluayBpbmZvDQpDUkVBVEUgVEFCTEUgI0RhdGFiYXNlQXV0b1Nocmlua0luZm8gKA0KICAgIFtEYXRhYmFzZSBOYW1lXSBOVkFSQ0hBUigyNTUpLA0KICAgIGlzX2F1dG9fc2hyaW5rX29uIEJJVA0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjRGF0YWJhc2VBdXRvU2hyaW5rSW5mbw0KU0VMRUNUDQogICAgZGIuW25hbWVdIEFTIFtEYXRhYmFzZSBOYW1lXSwNCiAgICBkYi5pc19hdXRvX3Nocmlua19vbg0KRlJPTSBzeXMuZGF0YWJhc2VzIEFTIGRiIFdJVEggKE5PTE9DSykNCk9SREVSIEJZIGRiLltuYW1lXSBPUFRJT04gKFJFQ09NUElMRSk7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0taXNfYXV0b19jbG9zZV9vbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgdGVtcG9yYXJ5IHRhYmxlIGZvciBBdXRvIENsb3NlIGluZm8NCkNSRUFURSBUQUJMRSAjRGF0YWJhc2VBdXRvQ2xvc2VJbmZvICgNCiAgICBbRGF0YWJhc2UgTmFtZV0gTlZBUkNIQVIoMjU1KSwNCiAgICBpc19hdXRvX2Nsb3NlX29uIEJJVA0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjRGF0YWJhc2VBdXRvQ2xvc2VJbmZvDQpTRUxFQ1QNCiAgICBkYi5bbmFtZV0gQVMgW0RhdGFiYXNlIE5hbWVdLA0KICAgIGRiLmlzX2F1dG9fY2xvc2Vfb24NCkZST00gc3lzLmRhdGFiYXNlcyBBUyBkYiBXSVRIIChOT0xPQ0spDQpPUkRFUiBCWSBkYi5bbmFtZV0gT1BUSU9OIChSRUNPTVBJTEUpOw0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tW1JlY292ZXJ5IE1vZGVsXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgYSB0ZW1wb3JhcnkgdGFibGUgZm9yIFJlY292ZXJ5IE1vZGVsDQpDUkVBVEUgVEFCTEUgI0RhdGFiYXNlTG9nSW5mbyAoDQogICAgW0RhdGFiYXNlIE5hbWVdIE5WQVJDSEFSKDI1NSksDQogICAgW1JlY292ZXJ5IE1vZGVsXSBOVkFSQ0hBUigyNTUpDQopOw0KDQotLSBJbnNlcnQgZGF0YSBpbnRvIHRoZSB0ZW1wb3JhcnkgdGFibGUNCklOU0VSVCBJTlRPICNEYXRhYmFzZUxvZ0luZm8NClNFTEVDVA0KICAgIGRiLltuYW1lXSBBUyBbRGF0YWJhc2UgTmFtZV0sDQogICAgZGIucmVjb3ZlcnlfbW9kZWxfZGVzYyBBUyBbUmVjb3ZlcnkgTW9kZWxdDQpGUk9NIHN5cy5kYXRhYmFzZXMgQVMgZGIgV0lUSCAoTk9MT0NLKQ0KSU5ORVIgSk9JTiBzeXMuZG1fb3NfcGVyZm9ybWFuY2VfY291bnRlcnMgQVMgbHUgV0lUSCAoTk9MT0NLKQ0KICAgIE9OIGRiLm5hbWUgPSBsdS5pbnN0YW5jZV9uYW1lDQpJTk5FUiBKT0lOIHN5cy5kbV9vc19wZXJmb3JtYW5jZV9jb3VudGVycyBBUyBscyBXSVRIIChOT0xPQ0spDQogICAgT04gZGIubmFtZSA9IGxzLmluc3RhbmNlX25hbWUNCkxFRlQgT1VURVIgSk9JTiBzeXMuZG1fZGF0YWJhc2VfZW5jcnlwdGlvbl9rZXlzIEFTIGRlIFdJVEggKE5PTE9DSykNCiAgICBPTiBkYi5kYXRhYmFzZV9pZCA9IGRlLmRhdGFiYXNlX2lkDQpXSEVSRSBsdS5jb3VudGVyX25hbWUgTElLRSBOJ0xvZyBGaWxlKHMpIFVzZWQgU2l6ZSAoS0IpJScNCiAgQU5EIGxzLmNvdW50ZXJfbmFtZSBMSUtFIE4nTG9nIEZpbGUocykgU2l6ZSAoS0IpJScNCiAgQU5EIGxzLmNudHJfdmFsdWUgPiAwDQpPUkRFUiBCWSBkYi5bbmFtZV0gT1BUSU9OIChSRUNPTVBJTEUpOw0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tW0pvYiBIaXN0b3J5XS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgYSB0ZW1wb3JhcnkgdGFibGUgZm9yIEpvYiBIaXN0b3J5DQpDUkVBVEUgVEFCTEUgI0pvYkhpc3RvcnkgKA0KICAgIEpvYk5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBMYXN0UnVuRHVyYXRpb24gTlZBUkNIQVIoMjApLA0KICAgIExhc3RSdW5UaW1lIERBVEVUSU1FLA0KICAgIFJ1blN0YXR1cyBOVkFSQ0hBUig1MCksDQogICAgU3RhdHVzIE5WQVJDSEFSKDUwKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjSm9iSGlzdG9yeQ0KU0VMRUNUDQogICAgc2pvLm5hbWUgQVMgSm9iTmFtZSwNCiAgICBJU05VTEwoDQogICAgICAgIENBU0UNCiAgICAgICAgICAgIFdIRU4gc2poLnJ1bl9kdXJhdGlvbiBJUyBOVUxMIFRIRU4gJ05PTkUnDQogICAgICAgICAgICBFTFNFIENPTlZFUlQoVkFSQ0hBUigyMCksIHNqaC5ydW5fZHVyYXRpb24gLyAxMDAwMCkgKyAnOicgKw0KICAgICAgICAgICAgICAgICBSSUdIVCgnMCcgKyBDT05WRVJUKFZBUkNIQVIoMiksIChzamgucnVuX2R1cmF0aW9uIC8gMTAwKSAlIDEwMCksIDIpICsgJzonICsNCiAgICAgICAgICAgICAgICAgUklHSFQoJzAnICsgQ09OVkVSVChWQVJDSEFSKDIpLCBzamgucnVuX2R1cmF0aW9uICUgMTAwKSwgMikNCiAgICAgICAgRU5ELCAnTk9ORScpIEFTIExhc3RSdW5EdXJhdGlvbiwNCiAgICBJU05VTEwoDQogICAgICAgIENBU0UNCiAgICAgICAgICAgIFdIRU4gbXNkYi5kYm8uYWdlbnRfZGF0ZXRpbWUoc2poLnJ1bl9kYXRlLCBzamgucnVuX3RpbWUpIElTIE5VTEwgVEhFTiAnMTkwMC0wMS0wMSAwMDowMDowMCcNCiAgICAgICAgICAgIEVMU0UgbXNkYi5kYm8uYWdlbnRfZGF0ZXRpbWUoc2poLnJ1bl9kYXRlLCBzamgucnVuX3RpbWUpDQogICAgICAgIEVORCwgJzE5MDAtMDEtMDEgMDA6MDA6MDAnKSBBUyBMYXN0UnVuVGltZSwNCiAgICBJU05VTEwoQ0FTRSBzamgucnVuX3N0YXR1cw0KICAgICAgICBXSEVOIDAgVEhFTiAnRmFpbGVkJw0KICAgICAgICBXSEVOIDEgVEhFTiAnU3VjY2VlZGVkJw0KICAgICAgICBFTFNFICdOT05FJw0KICAgIEVORCwgJ05PTkUnKSBBUyBSdW5TdGF0dXMsDQogICAgSVNOVUxMKENBU0Ugc2pvLmVuYWJsZWQNCiAgICAgICAgV0hFTiAxIFRIRU4gJ0VuYWJsZScNCiAgICAgICAgV0hFTiAwIFRIRU4gJ0Rpc2FibGUnDQogICAgICAgIEVMU0UgJ05PTkUnDQogICAgRU5ELCAnTk9ORScpIEFTIFN0YXR1cw0KRlJPTSBtc2RiLmRiby5zeXNqb2JzIHNqbw0KTEVGVCBKT0lOIG1zZGIuZGJvLnN5c2pvYmhpc3Rvcnkgc2poDQogICAgT04gc2pvLmpvYl9pZCA9IHNqaC5qb2JfaWQNCiAgICBBTkQgc2poLmluc3RhbmNlX2lkID0gKA0KICAgICAgICBTRUxFQ1QgTUFYKGluc3RhbmNlX2lkKQ0KICAgICAgICBGUk9NIG1zZGIuZGJvLnN5c2pvYmhpc3RvcnkNCiAgICAgICAgV0hFUkUgc3lzam9iaGlzdG9yeS5qb2JfaWQgPSBzam8uam9iX2lkDQogICAgKQ0KT1JERVIgQlkgTGFzdFJ1blRpbWUgREVTQzsNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1PcnBoYW4gVXNlcnMgRVMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KQ1JFQVRFIFRBQkxFICNPUlBIQU5VU0VSICgNCiAgICBEQk5BTUUgVkFSQ0hBUigxMDApLA0KICAgIFVTRVJOQU1FIFZBUkNIQVIoMTAwKSwNCiAgICBDUkVBVEVEQVRFIFZBUkNIQVIoMTAwKSwNCiAgICBVU0VSVFlQRSBWQVJDSEFSKDEwMCkNCik7DQoNCi0tIEluc2VydCBkYXRhIGludG8gdGhlIHRhYmxlDQpFWEVDIHNwX01TZm9yZWFjaGRiICcNClVTRSBbP107DQpJTlNFUlQgSU5UTyAjT1JQSEFOVVNFUg0KU0VMRUNUDQogICAgREJfTkFNRSgpIEFTIERCTkFNRSwNCiAgICBOQU1FIEFTIFVTRVJOQU1FLA0KICAgIENSRUFURURBVEUsDQogICAgQ0FTRQ0KICAgICAgICBXSEVOIElTTlRHUk9VUCA9IDAgQU5EIElTTlRVU0VSID0gMCBUSEVOICcnU1FMIExPR0lOJycNCiAgICAgICAgV0hFTiBJU05UR1JPVVAgPSAxIFRIRU4gJydOVCBHUk9VUCcnDQogICAgICAgIFdIRU4gSVNOVEdST1VQID0gMCBBTkQgSVNOVFVTRVIgPSAxIFRIRU4gJydOVCBMT0dJTicnDQogICAgRU5EIEFTIFVTRVJUWVBFDQpGUk9NIHN5cy5zeXN1c2Vycw0KV0hFUkUgU0lEIElTIE5PVCBOVUxMDQogIEFORCBTSUQgPD4gMFgwDQogIEFORCBJU0xPR0lOID0gMQ0KICBBTkQgU0lEIE5PVCBJTiAoU0VMRUNUIFNJRCBGUk9NIHN5cy5zeXNsb2dpbnMpDQogIEFORCBOQU1FIE5PVCBJTiAoJydkYm8nJywgJydNU19EYXRhQ29sbGVjdG9ySW50ZXJuYWxVc2VyJycpDQonOw0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1zZWN1cml0eUF1ZGl0SEMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KQ1JFQVRFIFRBQkxFICNFbXB0eVBhc3N3b3JkTG9naW5zICgNCiAgICBuYW1lIE5WQVJDSEFSKDI1NSksDQogICAgdHlwZV9kZXNjIE5WQVJDSEFSKDI1NSksDQogICAgY3JlYXRlX2RhdGUgREFURVRJTUUsDQogICAgbW9kaWZ5X2RhdGUgREFURVRJTUUsDQogICAgcGFzc3dvcmRfaGFzaCBWQVJCSU5BUlkoTUFYKQ0KKTsNCg0KQkVHSU4NCiAgICBJTlNFUlQgSU5UTyAjRW1wdHlQYXNzd29yZExvZ2lucw0KICAgIFNFTEVDVCBuYW1lLCB0eXBlX2Rlc2MsIGNyZWF0ZV9kYXRlLCBtb2RpZnlfZGF0ZSwgcGFzc3dvcmRfaGFzaA0KICAgIEZST00gc3lzLnNxbF9sb2dpbnMNCiAgICBXSEVSRSBQV0RDT01QQVJFKENPTlZFUlQoTlZBUkNIQVIoNDAwMCksICcnKSwgcGFzc3dvcmRfaGFzaCkgPSAxOyAtLSBDaGVjayBmb3IgZW1wdHkgcGFzc3dvcmRzDQoNCg0KRU5EDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1EaXNhYmxlIExvZ2lucy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpDUkVBVEUgVEFCTEUgI1NlcnZlckxvZ2lucyAoDQoNCiAgICBuYW1lIFNZU05BTUUsDQogICAgaXNfZGlzYWJsZWQgSU5ULA0KICAgIHR5cGVfZGVzYyBWQVJDSEFSKDYwKSwNCiAgICBjcmVhdGVfZGF0ZSBEQVRFVElNRSwNCiAgICBtb2RpZnlfZGF0ZSBEQVRFVElNRSwNCiAgICBzZXJ2ZXJfcm9sZXMgVkFSQ0hBUihNQVgpLA0KICAgIGRiX3JvbGVzIFZBUkNIQVIoTUFYKQ0KKTsNCg0KQ1JFQVRFIFRBQkxFICNEQkxldmVsUGVybWlzc2lvbnMgKA0KICAgIHNpZF8gVkFSQ0hBUig0MDApLA0KICAgIERCTmFtZSBTWVNOQU1FLA0KICAgIERCUm9sZSBTWVNOQU1FLA0KICAgIE1lbWJlck5hbWUgU1lTTkFNRQ0KKTsNCg0KLS0gR2F0aGVyIHNlcnZlci1sZXZlbCBwZXJtaXNzaW9ucw0KU0VMRUNUIHNpZCwgQ09OVkVSVChTWVNOQU1FLCBMR04ubmFtZSkgQVMgTmFtZSwgU1VTRVJfTkFNRShSTS5yb2xlX3ByaW5jaXBhbF9pZCkgQVMgUm9sZU5hbWUNCklOVE8gI1NlcnZlckxldmVsUGVybWlzc2lvbnMNCkZST00gc3lzLnNlcnZlcl9yb2xlX21lbWJlcnMgUk0NCklOTkVSIEpPSU4gc3lzLnNlcnZlcl9wcmluY2lwYWxzIExHTg0KICAgIE9OIFJNLm1lbWJlcl9wcmluY2lwYWxfaWQgPSBMR04ucHJpbmNpcGFsX2lkDQpXSEVSRSBSTS5yb2xlX3ByaW5jaXBhbF9pZCA+PSAzIEFORCBSTS5yb2xlX3ByaW5jaXBhbF9pZCA8PSAxMDsNCg0KLS0gR2F0aGVyIHNlcnZlciBwcmluY2lwYWxzDQpTRUxFQ1Qgc2lkLCBuYW1lLCBpc19kaXNhYmxlZCwgdHlwZV9kZXNjLCBjcmVhdGVfZGF0ZSwgbW9kaWZ5X2RhdGUNCklOVE8gI1NlcnZlclByaW5jaXBhbHMNCkZST00gc3lzLnNlcnZlcl9wcmluY2lwYWxzDQpXSEVSRSB0eXBlIE5PVCBJTiAoJ0MnLCAnUicpDQogIEFORCBuYW1lIE5PVCBJTiAoJ3NhJywgJ3JlY29uJywgJyMjTVNfUG9saWN5VHNxbEV4ZWN1dGlvbkxvZ2luIyMnLCAnIyNNU19Qb2xpY3lFdmVudFByb2Nlc3NpbmdMb2dpbiMjJywNCiAgICAgICAgICAgICAgICAgICAnTlQgQVVUSE9SSVRZXFxTWVNURU0nLCAnTlQgQVVUSE9SSVRZXFxORVRXT1JLIFNFUlZJQ0UnLA0KICAgICAgICAgICAgICAgICAgICdOVCBTRVJWSUNFXFxNU1NRTFNFUlZFUicsICdOVCBTRVJWSUNFXFxTUUxTRVJWRVJBR0VOVCcpOw0KDQotLSBHYXRoZXIgZGF0YWJhc2UtbGV2ZWwgcGVybWlzc2lvbnMNCkVYRUMgc3BfTVNmb3JlYWNoZGIgJ1VTRSBbP107DQpJTlNFUlQgSU5UTyAjREJMZXZlbFBlcm1pc3Npb25zDQpTRUxFQ1QgdS5zaWQsIERCX05BTUUoKSBBUyBEQk5hbWUsIGcubmFtZSBBUyBEQlJvbGUsIHUubmFtZSBBUyBNZW1iZXJOYW1lDQpGUk9NIHN5cy5kYXRhYmFzZV9wcmluY2lwYWxzIHUNCklOTkVSIEpPSU4gc3lzLmRhdGFiYXNlX3JvbGVfbWVtYmVycyBtIE9OIHUucHJpbmNpcGFsX2lkID0gbS5tZW1iZXJfcHJpbmNpcGFsX2lkDQpJTk5FUiBKT0lOIHN5cy5kYXRhYmFzZV9wcmluY2lwYWxzIGcgT04gZy5wcmluY2lwYWxfaWQgPSBtLnJvbGVfcHJpbmNpcGFsX2lkOyc7DQoNCi0tIFByb2Nlc3MgbG9naW4gaW5mb3JtYXRpb24NCkRFQ0xBUkUgQHN0cjEgVkFSQ0hBUihNQVgpLCBAc3RyMiBWQVJDSEFSKE1BWCksIEBzaWRfIFZBUkNIQVIoNDAwKSwgQG5hbWUgU1lTTkFNRTsNCkRFQ0xBUkUgQGlzX2Rpc2FibGVkIElOVCwgQHR5cGVfZGVzYyBWQVJDSEFSKDYwKSwgQGNyZWF0ZV9kYXRlIERBVEVUSU1FLCBAbW9kaWZ5X2RhdGUgREFURVRJTUU7DQpTRVQgQHN0cjEgPSAnJzsNClNFVCBAc3RyMiA9ICcnOw0KDQpERUNMQVJFIEN1cnNvclggQ1VSU09SIEZPUg0KU0VMRUNUIHNpZCwgbmFtZSwgaXNfZGlzYWJsZWQsIHR5cGVfZGVzYywgY3JlYXRlX2RhdGUsIG1vZGlmeV9kYXRlDQpGUk9NICNTZXJ2ZXJQcmluY2lwYWxzOw0KDQpPUEVOIEN1cnNvclg7DQpGRVRDSCBORVhUIEZST00gQ3Vyc29yWCBJTlRPIEBzaWRfLCBAbmFtZSwgQGlzX2Rpc2FibGVkLCBAdHlwZV9kZXNjLCBAY3JlYXRlX2RhdGUsIEBtb2RpZnlfZGF0ZTsNCg0KV0hJTEUgQEBGRVRDSF9TVEFUVVMgPSAwDQpCRUdJTg0KICAgIFNFVCBAc3RyMSA9ICcnOw0KICAgIFNFTEVDVCBAc3RyMSArPSBSb2xlTmFtZSArICcsJyBGUk9NICNTZXJ2ZXJMZXZlbFBlcm1pc3Npb25zIFdIRVJFIE5hbWUgPSBDT05WRVJUKFNZU05BTUUsIEBuYW1lKTsNCiAgICBJRiBAc3RyMSA8PiAnJyBTRVQgQHN0cjEgPSBMRUZUKEBzdHIxLCBMRU4oQHN0cjEpIC0gMSk7DQoNCiAgICBTRVQgQHN0cjIgPSAnJzsNCiAgICBTRUxFQ1QgQHN0cjIgKz0gREJOYW1lICsgJygnJycgKyBEQlJvbGUgKyAnJycpLCcgRlJPTSAjREJMZXZlbFBlcm1pc3Npb25zIFdIRVJFIHNpZF8gPSBDT05WRVJUKFZBUkNIQVIoNDAwKSwgQHNpZF8pOw0KICAgIElGIEBzdHIyIDw+ICcnIFNFVCBAc3RyMiA9IExFRlQoQHN0cjIsIExFTihAc3RyMikgLSAxKTsNCg0KICAgIElOU0VSVCBJTlRPICNTZXJ2ZXJMb2dpbnMNCiAgICBTRUxFQ1QgIEBuYW1lLCBAaXNfZGlzYWJsZWQsIEB0eXBlX2Rlc2MsIEBjcmVhdGVfZGF0ZSwgQG1vZGlmeV9kYXRlLCBAc3RyMSwgQHN0cjI7DQoNCiAgICBGRVRDSCBORVhUIEZST00gQ3Vyc29yWCBJTlRPIEBzaWRfLCBAbmFtZSwgQGlzX2Rpc2FibGVkLCBAdHlwZV9kZXNjLCBAY3JlYXRlX2RhdGUsIEBtb2RpZnlfZGF0ZTsNCkVORA0KDQpDTE9TRSBDdXJzb3JYOw0KREVBTExPQ0FURcKgQ3Vyc29yWDsNCg0KLS0gUmV0dXJuIGRpc2FibGVkIGxvZ2lucw0KDQoNCg0KDQoNCg0KDQogICAgLS0gU29udcOnbGFyxLEgZMO2bmTDvHINClNFTEVDVCAqIEZST00gI0Fsd2F5c09uSW5mbzsNClNFTEVDVCAqIEZST00gI1NlcnZlckluZm87DQpTRUxFQ1QgKiBGUk9NICNTZXJ2ZXJDb25maWd1cmF0aW9uOw0KU0VMRUNUICogRlJPTSAjVG90YWxNZW1vcnk7DQpTRUxFQ1QgKiBGUk9NICNNaW5TZXJ2ZXJNZW1vcnk7DQpTRUxFQ1QgKiBGUk9NICNNYXhTZXJ2ZXJNZW1vcnk7DQpTRUxFQ1QgKiBGUk9NICNCYWNrdXBDb21wcmVzc2lvbkluZm87DQpTRUxFQ1QgKiBGUk9NICNEYXRhYmFzZUNQVVVzYWdlOw0KU0VMRUNUICogRlJPTSAjRGF0YWJhc2VGaWxlSW5mbzsNClNFTEVDVCAqIEZST00gI0JhY2t1cERldGFpbHM7DQpTRUxFQ1QgKiBGUk9NICNEYXRhYmFzZVNpemVJbmZvOw0KU0VMRUNUICogRlJPTSAjRGJHcm93dGg7DQpTRUxFQ1QgKiBGUk9NICNEZWFkbG9ja1BlcmZvcm1hbmNlOw0KU0VMRUNUICogRlJPTSAjRGF0YWJhc2VQYWdlVmVyaWZ5SW5mbzsNClNFTEVDVCAqIEZST00gI0RhdGFiYXNlQ29tcGF0aWJpbGl0eUluZm87DQpTRUxFQ1QgKiBGUk9NICNEYXRhYmFzZUF1dG9TaHJpbmtJbmZvOw0KU0VMRUNUICogRlJPTSAjRGF0YWJhc2VBdXRvQ2xvc2VJbmZvOw0KU0VMRUNUICogRlJPTSAjRGF0YWJhc2VMb2dJbmZvOw0KU0VMRUNUICogRlJPTSAjSm9iSGlzdG9yeTsNClNFTEVDVCAqIEZST00gI09SUEhBTlVTRVI7DQpTRUxFQ1QgKiBGUk9NICNFbXB0eVBhc3N3b3JkTG9naW5zOw0KU0VMRUNUICogRlJPTSAjU2VydmVyTG9naW5zOw0KDQoNCg0KDQo="""