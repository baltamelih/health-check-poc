SECURITY_SCRIPT4_BASE64 = """SUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNBbHdheXNPbkluZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNBbHdheXNPbkluZm87DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNTZXJ2ZXJJbmZvJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjU2VydmVySW5mbzsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI1NlcnZlckNvbmZpZ3VyYXRpb24nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNTZXJ2ZXJDb25maWd1cmF0aW9uOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jVG90YWxNZW1vcnknKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNUb3RhbE1lbW9yeTsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI01pblNlcnZlck1lbW9yeScpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI01pblNlcnZlck1lbW9yeTsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI01heFNlcnZlck1lbW9yeScpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI01heFNlcnZlck1lbW9yeTsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0JhY2t1cENvbXByZXNzaW9uSW5mbycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0JhY2t1cENvbXByZXNzaW9uSW5mbzsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RhdGFiYXNlQ1BVVXNhZ2UnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYXRhYmFzZUNQVVVzYWdlOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jRGF0YWJhc2VGaWxlSW5mbycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0RhdGFiYXNlRmlsZUluZm87DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNCYWNrdXBEZXRhaWxzJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjQmFja3VwRGV0YWlsczsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RhdGFiYXNlU2l6ZUluZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYXRhYmFzZVNpemVJbmZvOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jQmFja3VwU3RhdHMnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNCYWNrdXBTdGF0czsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RlYWRsb2NrUGVyZm9ybWFuY2UnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEZWFkbG9ja1BlcmZvcm1hbmNlOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jREJDQ1Jlc3VsdHMnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEQkNDUmVzdWx0czsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI3RlbXAnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICN0ZW1wOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jRGF0YWJhc2VQYWdlVmVyaWZ5SW5mbycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0RhdGFiYXNlUGFnZVZlcmlmeUluZm87DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNEYXRhYmFzZUNvbXBhdGliaWxpdHlJbmZvJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjRGF0YWJhc2VDb21wYXRpYmlsaXR5SW5mbzsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RhdGFiYXNlQXV0b1Nocmlua0luZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNEYXRhYmFzZUF1dG9TaHJpbmtJbmZvOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jRGF0YWJhc2VBdXRvQ2xvc2VJbmZvJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjRGF0YWJhc2VBdXRvQ2xvc2VJbmZvOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jRGF0YWJhc2VMb2dJbmZvJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjRGF0YWJhc2VMb2dJbmZvOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jSm9iSGlzdG9yeScpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0pvYkhpc3Rvcnk7DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNPUlBIQU5VU0VSJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjT1JQSEFOVVNFUjsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI1ZMRkluZm8nKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNWTEZJbmZvOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jVkxGQ291bnRSZXN1bHRzJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjVkxGQ291bnRSZXN1bHRzOw0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jRW1wdHlQYXNzd29yZExvZ2lucycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0VtcHR5UGFzc3dvcmRMb2dpbnM7DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNTYW1lUGFzc3dvcmRMb2dpbnMnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNTYW1lUGFzc3dvcmRMb2dpbnM7DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNQb2xpY3lOb3RDaGVja2VkTG9naW5zJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjUG9saWN5Tm90Q2hlY2tlZExvZ2luczsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI1N5c3RlbURyaXZlJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjU3lzdGVtRHJpdmU7DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNCYWNrdXBMb2dSdW5uaW5nJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjQmFja3VwTG9nUnVubmluZzsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI1Bvd2VyU2hlbGxPdXRwdXQnKSBJUyBOT1QgTlVMTA0KQkVHSU4NCiAgICBEUk9QIFRBQkxFICNQb3dlclNoZWxsT3V0cHV0Ow0KRU5EDQoNCklGIE9CSkVDVF9JRCgndGVtcGRiLi4jU2VydmVyUHJpbmNpcGFscycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI1NlcnZlclByaW5jaXBhbHM7DQpFTkQNCg0KSUYgT0JKRUNUX0lEKCd0ZW1wZGIuLiNTZXJ2ZXJMZXZlbFBlcm1pc3Npb25zJykgSVMgTk9UIE5VTEwNCkJFR0lODQogICAgRFJPUCBUQUJMRSAjU2VydmVyTGV2ZWxQZXJtaXNzaW9uczsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI1NlcnZlckxvZ2lucycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI1NlcnZlckxvZ2luczsNCkVORA0KDQpJRiBPQkpFQ1RfSUQoJ3RlbXBkYi4uI0RCTGV2ZWxQZXJtaXNzaW9ucycpIElTIE5PVCBOVUxMDQpCRUdJTg0KICAgIERST1AgVEFCTEUgI0RCTGV2ZWxQZXJtaXNzaW9uczsNCkVORA0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUFPX2luZm9ybWF0aW9uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpDUkVBVEUgVEFCTEUgI0Fsd2F5c09uSW5mbyAoDQogICAgQXZhaWxhYmlsaXR5R3JvdXBOYW1lIE5WQVJDSEFSKDI1NSksDQogICAgUmVwbGljYVNlcnZlck5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBBdmFpbGFiaWxpdHlNb2RlIE5WQVJDSEFSKDI1NSksDQogICAgRmFpbG92ZXJNb2RlIE5WQVJDSEFSKDI1NSkNCik7DQoNCi0tIEFsd2F5cyBPbiBrb250cm9sdQ0KSUYgU0VSVkVSUFJPUEVSVFkoJ0lzSGFkckVuYWJsZWQnKSA9IDENCkJFR0lODQogICAgLS0gQWx3YXlzIE9uIGV0a2luc2UsIEF2YWlsYWJpbGl0eSBHcm91cHMgdmUgUmVwbGljYSBiaWxnaWxlcmluaSB0YWJsb3lhIGVrbGVyDQogICAgSU5TRVJUIElOVE8gI0Fsd2F5c09uSW5mbw0KICAgIFNFTEVDVA0KICAgICAgICBhZy5uYW1lIEFTIFtBdmFpbGFiaWxpdHlHcm91cE5hbWVdLA0KICAgICAgICBhci5yZXBsaWNhX3NlcnZlcl9uYW1lIEFTIFtSZXBsaWNhU2VydmVyTmFtZV0sDQogICAgICAgIGFyLmF2YWlsYWJpbGl0eV9tb2RlX2Rlc2MgQVMgW0F2YWlsYWJpbGl0eU1vZGVdLA0KICAgICAgICBhci5mYWlsb3Zlcl9tb2RlX2Rlc2MgQVMgW0ZhaWxvdmVyTW9kZV0NCiAgICBGUk9NDQogICAgICAgIHN5cy5hdmFpbGFiaWxpdHlfZ3JvdXBzIGFnDQogICAgSU5ORVIgSk9JTg0KICAgICAgICBzeXMuYXZhaWxhYmlsaXR5X3JlcGxpY2FzIGFyIE9OIGFnLmdyb3VwX2lkID0gYXIuZ3JvdXBfaWQ7DQoNCg0KRU5EDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tc2VydmVyaW5mby0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpDUkVBVEUgVEFCTEUgI1NlcnZlckluZm8gKA0KICAgIFN1bnVjdSBOVkFSQ0hBUigyNTUpLA0KICAgIEVkaXRpb24gTlZBUkNIQVIoMjU1KSwNCiAgICBbVmVyc2lvbl0gTlZBUkNIQVIoMjU1KSwNCiAgICBDb2xsYXRpb24gTlZBUkNIQVIoMjU1KSwNCiAgICBDUFUgSU5ULA0KICAgIFtSQU0gKE1CKV0gSU5ULA0KICAgIENsdXN0ZXIgTlZBUkNIQVIoNTApLA0KICAgIEhBIE5WQVJDSEFSKDUwKSwNCiAgICBbU2FuYWwgU2VydmVyXSBOVkFSQ0hBUig1MCksDQogICAgT1MgTlZBUkNIQVIoMjU1KSwNCiAgICBbQ3VtdWxhdGl2ZSBVcGRhdGVdIE5WQVJDSEFSKDUwKSwNCiAgICBbU1FMIFZlcnNpb25dIE5WQVJDSEFSKDUwKQ0KKTsNCg0KREVDTEFSRSBAVmVyc2lvbiBJTlQ7DQpTRVQgQFZlcnNpb24gPSBDT05WRVJUKElOVCwgTEVGVChDT05WRVJUKFZBUkNIQVIsIFNFUlZFUlBST1BFUlRZKCdQcm9kdWN0VmVyc2lvbicpKSwgQ0hBUklOREVYKCcuJywgQ09OVkVSVChWQVJDSEFSLCBTRVJWRVJQUk9QRVJUWSgnUHJvZHVjdFZlcnNpb24nKSkpIC0gMSkpOw0KDQpJRiBAVmVyc2lvbiA+PSAxNCAtLSBTUUwgU2VydmVyIDIwMTcgdmUgc29ucmFzaQ0KQkVHSU4NCiAgICBJTlNFUlQgSU5UTyAjU2VydmVySW5mbw0KICAgIFNFTEVDVA0KICAgICAgICBDT05WRVJUKE5WQVJDSEFSKDI1NSksIFNFUlZFUlBST1BFUlRZKCdNYWNoaW5lTmFtZScpKSBBUyBbU3VudWN1XSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUigyNTUpLCBTRVJWRVJQUk9QRVJUWSgnRWRpdGlvbicpKSBBUyBbRWRpdGlvbl0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoMjU1KSwgU0VSVkVSUFJPUEVSVFkoJ1Byb2R1Y3RWZXJzaW9uJykpIEFTIFtWZXJzaW9uXSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUigyNTUpLCBTRVJWRVJQUk9QRVJUWSgnQ29sbGF0aW9uJykpIEFTIFtDb2xsYXRpb25dLA0KICAgICAgICBjcHVfY291bnQgQVMgW0NQVV0sDQogICAgICAgIHBoeXNpY2FsX21lbW9yeV9rYiAvIDEwMjQgQVMgW1JBTSAoTUIpXSwNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUig1MCksIFNFUlZFUlBST1BFUlRZKCdJc0NsdXN0ZXJlZCcpKSBBUyBbQ2x1c3Rlcl0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoNTApLCBTRVJWRVJQUk9QRVJUWSgnSXNIYWRyRW5hYmxlZCcpKSBBUyBbSEFdLA0KICAgICAgICBDQVNFDQogICAgICAgICAgICBXSEVOIEVYSVNUUyAoU0VMRUNUIDEgRlJPTSBzeXMuZG1fb3Nfc3lzX2luZm8gV0hFUkUgdmlydHVhbF9tYWNoaW5lX3R5cGVfZGVzYyA9ICdOT05FJykgVEhFTiAnSGF5aXInDQogICAgICAgICAgICBFTFNFICdFdmV0Jw0KICAgICAgICBFTkQgQVMgW1NhbmFsIFNlcnZlcl0sDQogICAgICAgIChTRUxFQ1QgVE9QIDEgaG9zdF9wbGF0Zm9ybSBGUk9NIHN5cy5kbV9vc19ob3N0X2luZm8pIEFTIFtPU10sDQogICAgICAgIENBU0UNCiAgICAgICAgICAgIFdIRU4gQEBWRVJTSU9OIExJS0UgJyVDVSUnIFRIRU4NCiAgICAgICAgICAgICAgICAnQ1UnICsgU1VCU1RSSU5HKEBAVkVSU0lPTiwgQ0hBUklOREVYKCdDVScsIEBAVkVSU0lPTikgKyAyLCBDSEFSSU5ERVgoJyAnLCBAQFZFUlNJT04sIENIQVJJTkRFWCgnQ1UnLCBAQFZFUlNJT04pKSAtIENIQVJJTkRFWCgnQ1UnLCBAQFZFUlNJT04pIC0gMikNCiAgICAgICAgICAgIEVMU0UgJ1JUTScNCiAgICAgICAgRU5EIEFTIFtDdW11bGF0aXZlIFVwZGF0ZV0sDQogICAgICAgIENBU0UNCiAgICAgICAgICAgIFdIRU4gQFZlcnNpb24gPSAxNiBUSEVOICdTUUwgU2VydmVyIDIwMjInDQogICAgICAgICAgICBXSEVOIEBWZXJzaW9uID0gMTUgVEhFTiAnU1FMIFNlcnZlciAyMDE5Jw0KICAgICAgICAgICAgV0hFTiBAVmVyc2lvbiA9IDE0IFRIRU4gJ1NRTCBTZXJ2ZXIgMjAxNycNCiAgICAgICAgICAgIEVMU0UgJ0JpbGlubWl5b3InDQogICAgICAgIEVORCBBUyBbU1FMIFZlcnNpb25dDQogICAgRlJPTSBzeXMuZG1fb3Nfc3lzX2luZm87DQoNCg0KICAgIA0KRU5EDQpFTFNFIC0tIFNRTCBTZXJ2ZXIgMjAxNiB2ZSBvbmNlc2kNCkJFR0lODQogICAgSU5TRVJUIElOVE8gI1NlcnZlckluZm8NCiAgICBTRUxFQ1QNCiAgICAgICAgQ09OVkVSVChOVkFSQ0hBUigyNTUpLCBTRVJWRVJQUk9QRVJUWSgnTWFjaGluZU5hbWUnKSkgQVMgW1N1bnVjdV0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoMjU1KSwgU0VSVkVSUFJPUEVSVFkoJ0VkaXRpb24nKSkgQVMgW0VkaXRpb25dLA0KICAgICAgICBDT05WRVJUKE5WQVJDSEFSKDI1NSksIFNFUlZFUlBST1BFUlRZKCdQcm9kdWN0VmVyc2lvbicpKSBBUyBbVmVyc2lvbl0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoMjU1KSwgU0VSVkVSUFJPUEVSVFkoJ0NvbGxhdGlvbicpKSBBUyBbQ29sbGF0aW9uXSwNCiAgICAgICAgY3B1X2NvdW50IEFTIFtDUFVdLA0KICAgICAgICBwaHlzaWNhbF9tZW1vcnlfa2IgLyAxMDI0IEFTIFtSQU0gKE1CKV0sDQogICAgICAgIENPTlZFUlQoTlZBUkNIQVIoNTApLCBTRVJWRVJQUk9QRVJUWSgnSXNDbHVzdGVyZWQnKSkgQVMgW0NsdXN0ZXJdLA0KICAgICAgICBDT05WRVJUKE5WQVJDSEFSKDUwKSwgU0VSVkVSUFJPUEVSVFkoJ0lzSGFkckVuYWJsZWQnKSkgQVMgW0hBXSwNCiAgICAgICAgJ0JpbGlubWl5b3InIEFTIFtTYW5hbCBTZXJ2ZXJdLA0KICAgICAgICAnQmlsaW5taXlvcicgQVMgW09TXSwNCiAgICAgICAgQ0FTRQ0KICAgICAgICAgICAgV0hFTiBAQFZFUlNJT04gTElLRSAnJUNVJScgVEhFTg0KICAgICAgICAgICAgICAgICdDVScgKyBTVUJTVFJJTkcoQEBWRVJTSU9OLCBDSEFSSU5ERVgoJ0NVJywgQEBWRVJTSU9OKSArIDIsIENIQVJJTkRFWCgnICcsIEBAVkVSU0lPTiwgQ0hBUklOREVYKCdDVScsIEBAVkVSU0lPTikpIC0gQ0hBUklOREVYKCdDVScsIEBAVkVSU0lPTikgLSAyKQ0KICAgICAgICAgICAgRUxTRSAnUlRNJw0KICAgICAgICBFTkQgQVMgW0N1bXVsYXRpdmUgVXBkYXRlXSwNCiAgICAgICAgQ0FTRQ0KICAgICAgICAgICAgV0hFTiBAVmVyc2lvbiA9IDEzIFRIRU4gJ1NRTCBTZXJ2ZXIgMjAxNicNCiAgICAgICAgICAgIFdIRU4gQFZlcnNpb24gPSAxMiBUSEVOICdTUUwgU2VydmVyIDIwMTQnDQogICAgICAgICAgICBXSEVOIEBWZXJzaW9uID0gMTEgVEhFTiAnU1FMIFNlcnZlciAyMDEyJw0KICAgICAgICAgICAgV0hFTiBAVmVyc2lvbiA9IDEwIFRIRU4gJ1NRTCBTZXJ2ZXIgMjAwOC9SMicNCiAgICAgICAgICAgIFdIRU4gQFZlcnNpb24gPSA5IFRIRU4gJ1NRTCBTZXJ2ZXIgMjAwNScNCiAgICAgICAgICAgIEVMU0UgJ0JpbGlubWl5b3InDQogICAgICAgIEVORCBBUyBbU1FMIFZlcnNpb25dDQogICAgRlJPTSBzeXMuZG1fb3Nfc3lzX2luZm87DQoNCg0KDQpFTkQ7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tY29uZmlndXJhdGlvbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpERUNMQVJFIEBBZHZhbmNlZE9wdGlvbnNFbmFibGVkIEJJVDsNCkRFQ0xBUkUgQEluaXRpYWxTZXR0aW5nIEJJVDsNCg0KLS0gJ3Nob3cgYWR2YW5jZWQgb3B0aW9ucycgYcOnxLFrIG3EsSBrb250cm9sIGV0DQpJRiBFWElTVFMgKFNFTEVDVCAqIEZST00gc3lzLmNvbmZpZ3VyYXRpb25zIFdIRVJFIG5hbWUgPSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJyBBTkQgdmFsdWVfaW5fdXNlID0gMSkNCkJFR0lODQogICAgU0VUIEBBZHZhbmNlZE9wdGlvbnNFbmFibGVkID0gMTsNCkVORA0KRUxTRQ0KQkVHSU4NCiAgICBTRVQgQEFkdmFuY2VkT3B0aW9uc0VuYWJsZWQgPSAwOw0KRU5EDQoNClNFVCBASW5pdGlhbFNldHRpbmcgPSBAQWR2YW5jZWRPcHRpb25zRW5hYmxlZDsNCg0KLS0gRcSfZXIga2FwYWzEsXlzYSBhw6cNCklGIEBBZHZhbmNlZE9wdGlvbnNFbmFibGVkID0gMA0KQkVHSU4NCiAgICAtLSBUcmFuc2FjdGlvbiBkxLHFn8SxbmRhIHNwX2NvbmZpZ3VyZSBrdWxsYW7EsW3EsQ0KICAgIEJFR0lOIFRSWQ0KICAgICAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMTsNCiAgICAgICAgUkVDT05GSUdVUkU7DQogICAgRU5EIFRSWQ0KICAgIEJFR0lOIENBVENIDQogICAgICAgIFBSSU5UICdzaG93IGFkdmFuY2VkIG9wdGlvbnMgYXlhcsSxIGHDp8SxbGFtYWTEsSEnOw0KICAgICAgICBSRVRVUk47DQogICAgRU5EIENBVENIDQpFTkQNCg0KLS0gVGVtcCB0YWJsbyBvbHXFn3R1cg0KDQoNCkNSRUFURSBUQUJMRSAjU2VydmVyQ29uZmlndXJhdGlvbiAoDQogICAgQ29uZmlnTmFtZSBOVkFSQ0hBUigxMDApLA0KICAgIENvbmZpZ1ZhbHVlIElOVA0KKTsNCg0KLS0gRGXEn2VybGVyaSB0ZW1wIHRhYmxveWEgeWF6DQpJTlNFUlQgSU5UTyAjU2VydmVyQ29uZmlndXJhdGlvbiAoQ29uZmlnTmFtZSwgQ29uZmlnVmFsdWUpDQpTRUxFQ1QgbmFtZSBBUyBDb25maWdOYW1lLCBDT05WRVJUKElOVCwgdmFsdWVfaW5fdXNlKSBBUyBDb25maWdWYWx1ZQ0KRlJPTSBzeXMuY29uZmlndXJhdGlvbnMNCldIRVJFIG5hbWUgSU4gKCdtYXggZGVncmVlIG9mIHBhcmFsbGVsaXNtJywgJ2Nvc3QgdGhyZXNob2xkIGZvciBwYXJhbGxlbGlzbScsICdvcHRpbWl6ZSBmb3IgYWQgaG9jIHdvcmtsb2FkcycpOw0KDQoNCg0KDQotLSBFxJ9lciBiYcWfbGFuZ8Sxw6d0YSBrYXBhbMSxeXNhIGdlcmkga2FwYXQNCklGIEBJbml0aWFsU2V0dGluZyA9IDANCkJFR0lODQogICAgLS0gVHJhbnNhY3Rpb24gZMSxxZ/EsW5kYSBzcF9jb25maWd1cmUga3VsbGFuxLFtxLENCiAgICBCRUdJTiBUUlkNCiAgICAgICAgRVhFQyBzcF9jb25maWd1cmUgJ3Nob3cgYWR2YW5jZWQgb3B0aW9ucycsIDA7DQogICAgICAgIFJFQ09ORklHVVJFOw0KICAgIEVORCBUUlkNCiAgICBCRUdJTiBDQVRDSA0KICAgICAgICBQUklOVCAnc2hvdyBhZHZhbmNlZCBvcHRpb25zIGF5YXLEsSBrYXBhdMSxbGFtYWTEsSEnOw0KICAgICAgICBSRVRVUk47DQogICAgRU5EIENBVENIDQpFTkQNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tbWF4LW1pbk1lbW9yeS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCkRFQ0xBUkUgQHhwQ21kU2hlbGxFbmFibGVkIEJJVDsNCg0KDQotLSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJyBhw6fEsWsgbcSxIGtvbnRyb2wgZXQNCklGIEVYSVNUUyAoU0VMRUNUICogRlJPTSBzeXMuY29uZmlndXJhdGlvbnMgV0hFUkUgbmFtZSA9ICdzaG93IGFkdmFuY2VkIG9wdGlvbnMnIEFORCB2YWx1ZV9pbl91c2UgPSAxKQ0KQkVHSU4NCiAgICBTRVQgQEFkdmFuY2VkT3B0aW9uc0VuYWJsZWQgPSAxOw0KRU5EDQpFTFNFDQpCRUdJTg0KICAgIFNFVCBAQWR2YW5jZWRPcHRpb25zRW5hYmxlZCA9IDA7DQpFTkQNCg0KU0VUIEBJbml0aWFsU2V0dGluZyA9IEBBZHZhbmNlZE9wdGlvbnNFbmFibGVkOw0KDQotLSBFxJ9lciBrYXBhbMSxeXNhIGHDpyAodHJhbnNhY3Rpb24gZMSxxZ/EsW5hIGFsxLFuZMSxKQ0KSUYgQEFkdmFuY2VkT3B0aW9uc0VuYWJsZWQgPSAwDQpCRUdJTg0KICAgIEJFR0lOIFRSWQ0KICAgICAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMTsNCiAgICAgICAgUkVDT05GSUdVUkU7DQogICAgRU5EIFRSWQ0KICAgIEJFR0lOIENBVENIDQogICAgICAgIFBSSU5UICdzaG93IGFkdmFuY2VkIG9wdGlvbnMgYcOnxLFsxLFya2VuIGhhdGEgb2x1xZ90dS4nOw0KICAgICAgICBSRVRVUk47DQogICAgRU5EIENBVENIDQpFTkQNCg0KLS0gVG9wbGFtIGJlbGxlayBpw6dpbiB0ZW1wIHRhYmxvIG9sdcWfdHVyDQoNCg0KQ1JFQVRFIFRBQkxFICNUb3RhbE1lbW9yeSAoDQogICAgVG90YWxNZW1vcnlfTUIgSU5UDQopOw0KDQpJTlNFUlQgSU5UTyAjVG90YWxNZW1vcnkNClNFTEVDVCBwaHlzaWNhbF9tZW1vcnlfa2IgLyAxMDI0IEFTIFRvdGFsTWVtb3J5X01CIC0tIFRvcGxhbSBSQU0gKE1CKQ0KRlJPTSBzeXMuZG1fb3Nfc3lzX2luZm87DQoNCi0tIE1pbmltdW0gYmVsbGVrIHlhcMSxbGFuZMSxcm1hIHRhYmxvc3Ugb2x1xZ90dXINCg0KQ1JFQVRFIFRBQkxFICNNaW5TZXJ2ZXJNZW1vcnkgKA0KICAgIG5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBtaW5pbXVtIElOVCwNCiAgICBtYXhpbXVtIElOVCwNCiAgICBjb25maWdfdmFsdWUgSU5ULA0KICAgIHJ1bl92YWx1ZSBJTlQNCik7DQoNCklOU0VSVCBJTlRPICNNaW5TZXJ2ZXJNZW1vcnkNCkVYRUMgc3BfY29uZmlndXJlICdtaW4gc2VydmVyIG1lbW9yeSc7DQoNCg0KDQpDUkVBVEUgVEFCTEUgI01heFNlcnZlck1lbW9yeSAoDQogICAgbmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIG1pbmltdW0gSU5ULA0KICAgIG1heGltdW0gSU5ULA0KICAgIGNvbmZpZ192YWx1ZSBJTlQsDQogICAgcnVuX3ZhbHVlIElOVA0KKTsNCg0KSU5TRVJUIElOVE8gI01heFNlcnZlck1lbW9yeQ0KRVhFQyBzcF9jb25maWd1cmUgJ21heCBzZXJ2ZXIgbWVtb3J5JzsNCg0KLS0gRcSfZXIgYmHFn2xhbmfEscOndGEga2FwYWzEsXlzYSBnZXJpIGthcGF0ICh0cmFuc2FjdGlvbiBkxLHFn8SxbmEgYWzEsW5kxLEpDQpJRiBASW5pdGlhbFNldHRpbmcgPSAwDQpCRUdJTg0KICAgIEJFR0lOIFRSWQ0KICAgICAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMDsNCiAgICAgICAgUkVDT05GSUdVUkU7DQogICAgRU5EIFRSWQ0KICAgIEJFR0lOIENBVENIDQogICAgICAgIFBSSU5UICdzaG93IGFkdmFuY2VkIG9wdGlvbnMga2FwYXTEsWzEsXJrZW4gaGF0YSBvbHXFn3R1Lic7DQogICAgICAgIFJFVFVSTjsNCiAgICBFTkQgQ0FUQ0gNCkVORA0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYmFja3VwQ29tcHJlc3Npb24tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgdGVtcG9yYXJ5IHRhYmxlIGZvciBiYWNrdXAgY29tcHJlc3Npb24gaW5mb3JtYXRpb24NCkNSRUFURSBUQUJMRSAjQmFja3VwQ29tcHJlc3Npb25JbmZvICgNCiAgICBDb25maWd1cmF0aW9uTmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIENvbmZpZ3VyZWRWYWx1ZSBOVkFSQ0hBUigyNTUpLA0KICAgIENvbXByZXNzaW9uQmFja3VwIE5WQVJDSEFSKDI1NSksDQogICAgRGVzY3JpcHRpb24gTlZBUkNIQVIoTUFYKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjQmFja3VwQ29tcHJlc3Npb25JbmZvDQpTRUxFQ1QNCiAgICBuYW1lIEFTIENvbmZpZ3VyYXRpb25OYW1lLA0KICAgIENPTlZFUlQoTlZBUkNIQVIoMjU1KSwgdmFsdWUpIEFTIENvbmZpZ3VyZWRWYWx1ZSwNCiAgICBDT05WRVJUKE5WQVJDSEFSKDI1NSksIHZhbHVlX2luX3VzZSkgQVMgQ29tcHJlc3Npb25CYWNrdXAsDQogICAgZGVzY3JpcHRpb24NCkZST00NCiAgICBzeXMuY29uZmlndXJhdGlvbnMNCldIRVJFDQogICAgbmFtZSA9ICdiYWNrdXAgY29tcHJlc3Npb24gZGVmYXVsdCc7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQ1BVdXRpbGl6YXRpb24tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENyZWF0ZSB0ZW1wb3JhcnkgdGFibGUgZm9yIENQVSB1dGlsaXphdGlvbiBieSBkYXRhYmFzZQ0KQ1JFQVRFIFRBQkxFICNEYXRhYmFzZUNQVVVzYWdlICgNCiAgICBbQ1BVIFJhbmtdIElOVCwNCiAgICBbRGF0YWJhc2UgTmFtZV0gTlZBUkNIQVIoMTI4KSwNCiAgICBbQ1BVIFRpbWUgKG1zKV0gQklHSU5ULA0KICAgIFtDUFUgUGVyY2VudF0gREVDSU1BTCg1LCAyKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQo7V0lUSCBEQl9DUFVfU3RhdHMgQVMNCigNCiAgICBTRUxFQ1QNCiAgICAgICAgcGEuRGF0YWJhc2VJRCwNCiAgICAgICAgREJfTmFtZShwYS5EYXRhYmFzZUlEKSBBUyBbRGF0YWJhc2UgTmFtZV0sDQogICAgICAgIFNVTShxcy50b3RhbF93b3JrZXJfdGltZSAvIDEwMDApIEFTIFtDUFVfVGltZV9Nc10NCiAgICBGUk9NIHN5cy5kbV9leGVjX3F1ZXJ5X3N0YXRzIEFTIHFzIFdJVEggKE5PTE9DSykNCiAgICBDUk9TUyBBUFBMWQ0KICAgICgNCiAgICAgICAgU0VMRUNUIENPTlZFUlQoSU5ULCB2YWx1ZSkgQVMgW0RhdGFiYXNlSURdDQogICAgICAgIEZST00gc3lzLmRtX2V4ZWNfcGxhbl9hdHRyaWJ1dGVzKHFzLnBsYW5faGFuZGxlKQ0KICAgICAgICBXSEVSRSBhdHRyaWJ1dGUgPSBOJ2RiaWQnDQogICAgKSBBUyBwYQ0KICAgIEdST1VQIEJZIHBhLkRhdGFiYXNlSUQNCikNCklOU0VSVCBJTlRPICNEYXRhYmFzZUNQVVVzYWdlDQpTRUxFQ1QNCiAgICBST1dfTlVNQkVSKCkgT1ZFUihPUkRFUiBCWSBbQ1BVX1RpbWVfTXNdIERFU0MpIEFTIFtDUFUgUmFua10sDQogICAgW0RhdGFiYXNlIE5hbWVdLA0KICAgIFtDUFVfVGltZV9Nc10gQVMgW0NQVSBUaW1lIChtcyldLA0KICAgIENBU1QoW0NQVV9UaW1lX01zXSAqIDEuMCAvIFNVTShbQ1BVX1RpbWVfTXNdKSBPVkVSKCkgKiAxMDAuMCBBUyBERUNJTUFMKDUsIDIpKSBBUyBbQ1BVIFBlcmNlbnRdDQpGUk9NIERCX0NQVV9TdGF0cw0KV0hFUkUgRGF0YWJhc2VJRCA8PiAzMjc2NyAtLSBFeGNsdWRlIFJlc291cmNlREINCk9SREVSIEJZIFtDUFUgUmFua10gT1BUSU9OIChSRUNPTVBJTEUpOw0KDQoNCg0KLS0gSWRlbnRpZnkgdGhlIGRhdGFiYXNlIHdpdGggdGhlIGhpZ2hlc3QgQ1BVIHV0aWxpemF0aW9uDQpERUNMQVJFIEBUYXJnZXREYXRhYmFzZSBOVkFSQ0hBUigxMjgpOw0KO1dJVEggREJfQ1BVX1N0YXRzIEFTDQooDQogICAgU0VMRUNUDQogICAgICAgIHBhLkRhdGFiYXNlSUQsDQogICAgICAgIERCX05hbWUocGEuRGF0YWJhc2VJRCkgQVMgW0RhdGFiYXNlIE5hbWVdLA0KICAgICAgICBTVU0ocXMudG90YWxfd29ya2VyX3RpbWUgLyAxMDAwKSBBUyBbQ1BVX1RpbWVfTXNdDQogICAgRlJPTSBzeXMuZG1fZXhlY19xdWVyeV9zdGF0cyBBUyBxcyBXSVRIIChOT0xPQ0spDQogICAgQ1JPU1MgQVBQTFkNCiAgICAoDQogICAgICAgIFNFTEVDVCBDT05WRVJUKElOVCwgdmFsdWUpIEFTIFtEYXRhYmFzZUlEXQ0KICAgICAgICBGUk9NIHN5cy5kbV9leGVjX3BsYW5fYXR0cmlidXRlcyhxcy5wbGFuX2hhbmRsZSkNCiAgICAgICAgV0hFUkUgYXR0cmlidXRlID0gTidkYmlkJw0KICAgICkgQVMgcGENCiAgICBHUk9VUCBCWSBwYS5EYXRhYmFzZUlEDQopDQpTRUxFQ1QgVE9QIDEgQFRhcmdldERhdGFiYXNlID0gW0RhdGFiYXNlIE5hbWVdDQpGUk9NIERCX0NQVV9TdGF0cw0KV0hFUkUgRGF0YWJhc2VJRCA8PiAzMjc2NyAtLSBFeGNsdWRlIFJlc291cmNlREINCk9SREVSIEJZIFtDUFVfVGltZV9Nc10gREVTQzsNCg0KLS0gUHJpbnQgdGhlIG5hbWUgb2YgdGhlIHRhcmdldCBkYXRhYmFzZSBmb3IgbW9uaXRvcmluZw0KUFJJTlQgJ1RhcmdldCBEYXRhYmFzZTogJyArIElTTlVMTChAVGFyZ2V0RGF0YWJhc2UsICdObyB0YXJnZXQgZGF0YWJhc2UgZm91bmQuJyk7DQoNCi0tIFN0b3Agc2NyaXB0IGV4ZWN1dGlvbiBpZiBubyBkYXRhYmFzZSBpcyBmb3VuZA0KSUYgQFRhcmdldERhdGFiYXNlIElTIE5VTEwNCkJFR0lODQogICAgUFJJTlQgJ05vIHRhcmdldCBkYXRhYmFzZSBmb3VuZC4gRXhpdGluZyBzY3JpcHQuJzsNCiAgICBSRVRVUk47DQpFTkQ7DQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1EYXRhYmFzZSBGaWxlIFBhdGhzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBEcm9wIHRoZSB0YWJsZSBpZiBpdCBhbHJlYWR5IGV4aXN0cw0KDQoNCi0tIENyZWF0ZSBhIHRlbXBvcmFyeSB0YWJsZSBmb3IgZGF0YWJhc2UgZmlsZSBpbmZvcm1hdGlvbg0KQ1JFQVRFIFRBQkxFICNEYXRhYmFzZUZpbGVJbmZvICgNCiAgICBbRGF0YWJhc2UgTmFtZV0gTlZBUkNIQVIoMjU1KSwNCiAgICBbZmlsZV9pZF0gSU5ULA0KICAgIFtuYW1lXSBOVkFSQ0hBUigyNTUpLA0KICAgIHBoeXNpY2FsX25hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBbdHlwZV9kZXNjXSBOVkFSQ0hBUig1MCksDQogICAgc3RhdGVfZGVzYyBOVkFSQ0hBUig1MCksDQogICAgaXNfcGVyY2VudF9ncm93dGggQklULA0KICAgIGdyb3d0aCBJTlQsDQogICAgW0dyb3d0aCBpbiBNQl0gQklHSU5ULA0KICAgIFtUb3RhbCBTaXplIGluIE1CXSBCSUdJTlQsDQogICAgbWF4X3NpemUgQklHSU5UDQopOw0KDQotLSBJbnNlcnQgZGF0YSBpbnRvIHRoZSB0ZW1wb3JhcnkgdGFibGUNCklOU0VSVCBJTlRPICNEYXRhYmFzZUZpbGVJbmZvDQpTRUxFQ1QNCiAgICBEQl9OQU1FKFtkYXRhYmFzZV9pZF0pIEFTIFtEYXRhYmFzZSBOYW1lXSwNCiAgICBbZmlsZV9pZF0sIFtuYW1lXSwgcGh5c2ljYWxfbmFtZSwgW3R5cGVfZGVzY10sIHN0YXRlX2Rlc2MsDQogICAgaXNfcGVyY2VudF9ncm93dGgsIGdyb3d0aCwNCiAgICBDT05WRVJUKEJJR0lOVCwgZ3Jvd3RoIC8gMTI4LjApIEFTIFtHcm93dGggaW4gTUJdLA0KICAgIENPTlZFUlQoQklHSU5ULCBzaXplIC8gMTI4LjApIEFTIFtUb3RhbCBTaXplIGluIE1CXSwgbWF4X3NpemUNCkZST00gc3lzLm1hc3Rlcl9maWxlcyBXSVRIIChOT0xPQ0spDQpPUkRFUiBCWSBEQl9OQU1FKFtkYXRhYmFzZV9pZF0pLCBbZmlsZV9pZF0gT1BUSU9OIChSRUNPTVBJTEUpOw0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQmFja3VwIGhpc3RvcnktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLS0gQ3JlYXRlIGEgdGVtcG9yYXJ5IHRhYmxlIGZvciBiYWNrdXAgZGV0YWlscw0KQ1JFQVRFIFRBQkxFICNCYWNrdXBEZXRhaWxzICgNCiAgICBTZXJ2ZXIgTlZBUkNIQVIoMTAwKSwNCiAgICBkYXRhYmFzZV9uYW1lIE5WQVJDSEFSKDI1NSksDQogICAgYmFja3VwX3N0YXJ0X2RhdGUgREFURVRJTUUsDQogICAgYmFja3VwX2ZpbmlzaF9kYXRlIERBVEVUSU1FLA0KICAgIGV4cGlyYXRpb25fZGF0ZSBEQVRFVElNRSwNCiAgICBiYWNrdXBfdHlwZSBOVkFSQ0hBUig1MCksDQogICAgW0JhY2t1cCBTaXplIGluIE1CXSBOVkFSQ0hBUig1MCksDQogICAgW0NvbXAgU2l6ZSBpbiBNQl0gTlZBUkNIQVIoNTApLA0KICAgIGxvZ2ljYWxfZGV2aWNlX25hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBwaHlzaWNhbF9kZXZpY2VfbmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIGJhY2t1cHNldF9uYW1lIE5WQVJDSEFSKDI1NSksDQogICAgZGVzY3JpcHRpb24gTlZBUkNIQVIoTUFYKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjQmFja3VwRGV0YWlscw0KU0VMRUNUDQogICAgQ09OVkVSVChDSEFSKDEwMCksIFNFUlZFUlBST1BFUlRZKCdTZXJ2ZXJuYW1lJykpIEFTIFNlcnZlciwNCiAgICBicy5kYXRhYmFzZV9uYW1lLA0KICAgIGJzLmJhY2t1cF9zdGFydF9kYXRlLA0KICAgIGJzLmJhY2t1cF9maW5pc2hfZGF0ZSwNCiAgICBicy5leHBpcmF0aW9uX2RhdGUsDQogICAgQ0FTRSBicy50eXBlDQogICAgICAgIFdIRU4gJ0QnIFRIRU4gJ0Z1bGwgRGF0YWJhc2UnDQogICAgICAgIFdIRU4gJ0wnIFRIRU4gJ0xvZycNCiAgICAgICAgV0hFTiAnSScgVEhFTiAnRGlmZmVyZW50aWFsJw0KICAgICAgICBXSEVOICdGJyBUSEVOICdGaWxlIExldmVsJw0KICAgICAgICBXSEVOICdHJyBUSEVOICdGaWxlIExldmVsIERpZmZlcmVudGlhbCcNCiAgICAgICAgV0hFTiAnUCcgVEhFTiAnUGFydGlhbCcNCiAgICAgICAgV0hFTiAnUScgVEhFTiAnRGlmZmVyZW50aWFsIHBhcnRpYWwnDQogICAgRU5EIEFTIGJhY2t1cF90eXBlLA0KICAgIENPTlZFUlQoVkFSQ0hBUiwgQ0FTVChicy5iYWNrdXBfc2l6ZSAvIDEwMjQgLyAxMDI0IEFTIE1PTkVZKSwgMTApIEFTIFtCYWNrdXAgU2l6ZSBpbiBNQl0sDQogICAgQ09OVkVSVChWQVJDSEFSLCBDQVNUKGJzLmNvbXByZXNzZWRfYmFja3VwX3NpemUgLyAxMDI0IC8gMTAyNCBBUyBNT05FWSksIDEwKSBBUyBbQ29tcCBTaXplIGluIE1CXSwNCiAgICBibWYubG9naWNhbF9kZXZpY2VfbmFtZSwNCiAgICBibWYucGh5c2ljYWxfZGV2aWNlX25hbWUsDQogICAgYnMubmFtZSBBUyBiYWNrdXBzZXRfbmFtZSwNCiAgICBicy5kZXNjcmlwdGlvbg0KRlJPTSBtc2RiLmRiby5iYWNrdXBtZWRpYWZhbWlseSBibWYNCklOTkVSIEpPSU4gbXNkYi5kYm8uYmFja3Vwc2V0IGJzIE9OIGJtZi5tZWRpYV9zZXRfaWQgPSBicy5tZWRpYV9zZXRfaWQNCldIRVJFIChDT05WRVJUKERBVEVUSU1FLCBicy5iYWNrdXBfc3RhcnRfZGF0ZSwgMTAyKSA+PSBHRVREQVRFKCkgLSAxMCkNCk9SREVSIEJZDQogICAgYnMuZGF0YWJhc2VfbmFtZSwNCiAgICBicy5iYWNrdXBfZmluaXNoX2RhdGU7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1EYXRhYmFzZVNpemUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENyZWF0ZSBhIHRlbXBvcmFyeSB0YWJsZSBmb3IgZGF0YWJhc2Ugc2l6ZSBpbmZvcm1hdGlvbg0KQ1JFQVRFIFRBQkxFICNEYXRhYmFzZVNpemVJbmZvICgNCiAgICBEYXRhYmFzZU5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBMb2dTaXplR0IgREVDSU1BTCgxOCwgMiksDQogICAgVG90YWxTaXplR0IgREVDSU1BTCgxOCwgMikNCik7DQoNCi0tIEluc2VydCBkYXRhIGludG8gdGhlIHRlbXBvcmFyeSB0YWJsZQ0KSU5TRVJUIElOVE8gI0RhdGFiYXNlU2l6ZUluZm8NClNFTEVDVCANCiAgICBEYXRhYmFzZU5hbWUgPSBEQl9OQU1FKGRhdGFiYXNlX2lkKSwNCiAgICBMb2dTaXplR0IgPSBDQVNUKFNVTShDQVNFIFdIRU4gdHlwZV9kZXNjID0gJ0xPRycgVEhFTiBzaXplIEVORCkgKiA4LiAvIDEwMjQgLyAxMDI0IEFTIERFQ0lNQUwoMTgsIDIpKSwNCiAgICBUb3RhbFNpemVHQiA9IENBU1QoU1VNKHNpemUpICogOC4gLyAxMDI0IC8gMTAyNCBBUyBERUNJTUFMKDE4LCAyKSkNCkZST00gc3lzLm1hc3Rlcl9maWxlcyBXSVRIIChOT0xPQ0spDQpXSEVSRSBkYXRhYmFzZV9pZCA+IDQNCkdST1VQIEJZIGRhdGFiYXNlX2lkDQpPUkRFUiBCWSBUb3RhbFNpemVHQiBERVNDOw0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQnV5dW1lIE9yYW5sYXItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KREVDTEFSRSBAc3RhcnREYXRlIERBVEVUSU1FOw0KU0VUIEBzdGFydERhdGUgPSBHRVREQVRFKCk7DQoNCi0tIENyZWF0ZSBhIHRlbXBvcmFyeSB0YWJsZSBmb3IgYmFja3VwIGdyb3d0aCBzdGF0aXN0aWNzDQpDUkVBVEUgVEFCTEUgI0JhY2t1cFN0YXRzICgNCiAgICBEYXRhYmFzZU5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBbMF0gTlVNRVJJQygxMCwgMSksDQogICAgWy0xXSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLTJdIE5VTUVSSUMoMTAsIDEpLA0KICAgIFstM10gTlVNRVJJQygxMCwgMSksDQogICAgWy00XSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLTVdIE5VTUVSSUMoMTAsIDEpLA0KICAgIFstNl0gTlVNRVJJQygxMCwgMSksDQogICAgWy03XSBOVU1FUklDKDEwLCAxKSwNCiAgICBbLThdIE5VTUVSSUMoMTAsIDEpLA0KICAgIFstOV0gTlVNRVJJQygxMCwgMSksDQogICAgWy0xMF0gTlVNRVJJQygxMCwgMSksDQogICAgWy0xMV0gTlVNRVJJQygxMCwgMSksDQogICAgWy0xMl0gTlVNRVJJQygxMCwgMSkNCik7DQoNCi0tIEluc2VydCBkYXRhIGludG8gdGhlIHRlbXBvcmFyeSB0YWJsZQ0KSU5TRVJUIElOVE8gI0JhY2t1cFN0YXRzDQpTRUxFQ1QgUFZULkRhdGFiYXNlTmFtZSwgDQogICAgICAgSVNOVUxMKFBWVC5bMF0sIDApIEFTIFswXSwNCiAgICAgICBJU05VTEwoUFZULlstMV0sIDApIEFTIFstMV0sDQogICAgICAgSVNOVUxMKFBWVC5bLTJdLCAwKSBBUyBbLTJdLA0KICAgICAgIElTTlVMTChQVlQuWy0zXSwgMCkgQVMgWy0zXSwNCiAgICAgICBJU05VTEwoUFZULlstNF0sIDApIEFTIFstNF0sDQogICAgICAgSVNOVUxMKFBWVC5bLTVdLCAwKSBBUyBbLTVdLA0KICAgICAgIElTTlVMTChQVlQuWy02XSwgMCkgQVMgWy02XSwNCiAgICAgICBJU05VTEwoUFZULlstN10sIDApIEFTIFstN10sDQogICAgICAgSVNOVUxMKFBWVC5bLThdLCAwKSBBUyBbLThdLA0KICAgICAgIElTTlVMTChQVlQuWy05XSwgMCkgQVMgWy05XSwNCiAgICAgICBJU05VTEwoUFZULlstMTBdLCAwKSBBUyBbLTEwXSwNCiAgICAgICBJU05VTEwoUFZULlstMTFdLCAwKSBBUyBbLTExXSwNCiAgICAgICBJU05VTEwoUFZULlstMTJdLCAwKSBBUyBbLTEyXQ0KRlJPTQ0KICAgKFNFTEVDVCBCUy5kYXRhYmFzZV9uYW1lIEFTIERhdGFiYXNlTmFtZSwNCiAgICAgICAgICBEQVRFRElGRihtbSwgQHN0YXJ0RGF0ZSwgQlMuYmFja3VwX3N0YXJ0X2RhdGUpIEFTIE1vbnRoc0FnbywNCiAgICAgICAgICBDT05WRVJUKE5VTUVSSUMoMTAsIDEpLCBBVkcoQkYuZmlsZV9zaXplIC8gMTA0ODU3Ni4wKSkgQVMgQXZnU2l6ZU1CDQogICAgRlJPTSBtc2RiLmRiby5iYWNrdXBzZXQgQVMgQlMNCiAgICBJTk5FUiBKT0lOIG1zZGIuZGJvLmJhY2t1cGZpbGUgQVMgQkYNCiAgICAgICAgT04gQlMuYmFja3VwX3NldF9pZCA9IEJGLmJhY2t1cF9zZXRfaWQNCiAgICBXSEVSRSBOT1QgQlMuZGF0YWJhc2VfbmFtZSBJTiAoJ21hc3RlcicsICdtc2RiJywgJ21vZGVsJywgJ3RlbXBkYicpDQogICAgICBBTkQgQkYuW2ZpbGVfdHlwZV0gPSAnRCcNCiAgICAgIEFORCBCUy5iYWNrdXBfc3RhcnRfZGF0ZSBCRVRXRUVOIERBVEVBREQoeXksIC0xLCBAc3RhcnREYXRlKSBBTkQgQHN0YXJ0RGF0ZQ0KICAgIEdST1VQIEJZIEJTLmRhdGFiYXNlX25hbWUsIERBVEVESUZGKG1tLCBAc3RhcnREYXRlLCBCUy5iYWNrdXBfc3RhcnRfZGF0ZSkNCiAgICApIEFTIEJDS1NUQVQNClBJVk9UIChTVU0oQkNLU1RBVC5BdmdTaXplTUIpDQogICAgICAgRk9SIEJDS1NUQVQuTW9udGhzQWdvIElOIChbMF0sIFstMV0sIFstMl0sIFstM10sIFstNF0sIFstNV0sIFstNl0sIFstN10sIFstOF0sIFstOV0sIFstMTBdLCBbLTExXSwgWy0xMl0pDQogICAgICApIEFTIFBWVDsNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1EZWFkbG9jay0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KLS0gQ3JlYXRlIGEgdGVtcG9yYXJ5IHRhYmxlIGZvciBkZWFkbG9jayBwZXJmb3JtYW5jZSBzdGF0aXN0aWNzDQpDUkVBVEUgVEFCTEUgI0RlYWRsb2NrUGVyZm9ybWFuY2UgKA0KICAgIG9iamVjdF9uYW1lIE5WQVJDSEFSKDI1NSksDQogICAgY291bnRlcl9uYW1lIE5WQVJDSEFSKDI1NSksDQogICAgQ291bnRlclZhbHVlX1RvdGFsIEJJR0lOVCwNCiAgICBDb3VudGVyVmFsdWVfUGVyX1NlYyBGTE9BVCwNCiAgICBDb3VudGVyVmFsdWVfUGVyX0RheSBGTE9BVCwNCiAgICBVcFRpbWVfU2VjIEJJR0lOVCwNCiAgICBVcFRpbWVfRGF5IEZMT0FUDQopOw0KDQotLSBJbnNlcnQgZGF0YSBpbnRvIHRoZSB0ZW1wb3JhcnkgdGFibGUNCklOU0VSVCBJTlRPICNEZWFkbG9ja1BlcmZvcm1hbmNlDQpTRUxFQ1QNCiAgICBwYy5vYmplY3RfbmFtZSwNCiAgICBwYy5jb3VudGVyX25hbWUsDQogICAgcGMuY250cl92YWx1ZSBBUyBDb3VudGVyVmFsdWVfVG90YWwsDQogICAgcGMuY250cl92YWx1ZSAqIDAuMSAvIHV0LlVwVGltZVNlYyBBUyBDb3VudGVyVmFsdWVfUGVyX1NlYywNCiAgICBwYy5jbnRyX3ZhbHVlICogMzYwMC4gKiAyNCAvIHV0LlVwVGltZVNlYyBBUyBDb3VudGVyVmFsdWVfUGVyX0RheSwNCiAgICB1dC5VcFRpbWVTZWMgQVMgVXBUaW1lX1NlYywNCiAgICB1dC5VcFRpbWVTZWMgLyAzNjAwLiAvIDI0IEFTIFVwVGltZV9EYXkNCkZST00gc3lzLmRtX29zX3BlcmZvcm1hbmNlX2NvdW50ZXJzIHBjDQpDUk9TUyBKT0lOICgNCiAgICBTRUxFQ1QgREFURURJRkYoU0VDT05ELCBzcWxzZXJ2ZXJfc3RhcnRfdGltZSwgQ1VSUkVOVF9USU1FU1RBTVApIEFTIFVwVGltZVNlYw0KICAgIEZST00gc3lzLmRtX29zX3N5c19pbmZvDQopIHV0DQpXSEVSRSBwYy5jb3VudGVyX25hbWUgPSAnTnVtYmVyIG9mIERlYWRsb2Nrcy9zZWMnIEFORCBwYy5pbnN0YW5jZV9uYW1lID0gJ19Ub3RhbCc7DQoNCg0KDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1DSEVDS0RCLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpCRUdJTg0KICAgIFNFVCBOT0NPVU5UIE9OOw0KDQogICAgQ1JFQVRFIFRBQkxFICN0ZW1wICgNCiAgICAgICAgUGFyZW50T2JqZWN0ICAgICBWQVJDSEFSKDI1NSksDQogICAgICAgIFtPYmplY3RdICAgICAgICAgVkFSQ0hBUigyNTUpLA0KICAgICAgICBGaWVsZCAgICAgICAgICAgIFZBUkNIQVIoMjU1KSwNCiAgICAgICAgW1ZhbHVlXSAgICAgICAgICBWQVJDSEFSKDI1NSkNCiAgICApOw0KDQogICAgQ1JFQVRFIFRBQkxFICNEQkNDUmVzdWx0cyAoDQogICAgICAgIFNlcnZlck5hbWUgICAgICAgICAgIFZBUkNIQVIoMjU1KSwNCiAgICAgICAgREJOYW1lICAgICAgICAgICAgICAgVkFSQ0hBUigyNTUpLA0KICAgICAgICBMYXN0Q2xlYW5EQkNDRGF0ZSAgICBEQVRFVElNRQ0KICAgICk7DQoNCiAgICBFWEVDIG1hc3Rlci5bc3lzXS5bc3BfTVNmb3JlYWNoZGJdDQogICAgICAgIEBjb21tYW5kMSA9ICdVU0UgWz9dIElOU0VSVCBJTlRPICN0ZW1wIEVYRUNVVEUgKCcnREJDQyBEQklORk8gV0lUSCBUQUJMRVJFU1VMVFMnJyknLA0KICAgICAgICBAY29tbWFuZDIgPSAnSU5TRVJUIElOVE8gI0RCQ0NSZXN1bHRzIFNFTEVDVCBAQFNFUlZFUk5BTUUsICcnPycnLCBWYWx1ZSBGUk9NICN0ZW1wIFdIRVJFIEZpZWxkID0gJydkYmlfZGJjY0xhc3RLbm93bkdvb2QnJycsDQogICAgICAgIEBjb21tYW5kMyA9ICdUUlVOQ0FURSBUQUJMRSAjdGVtcCc7DQoNCiAgICAtLSBSZW1vdmUgZHVwbGljYXRlIHJvd3MNCiAgICA7V0lUSCBEQkNDX0NURSBBUw0KICAgICgNCiAgICAgICAgU0VMRUNUIFJPV19OVU1CRVIoKSBPVkVSIChQQVJUSVRJT04gQlkgU2VydmVyTmFtZSwgREJOYW1lLCBMYXN0Q2xlYW5EQkNDRGF0ZSBPUkRFUiBCWSBMYXN0Q2xlYW5EQkNDRGF0ZSkgUm93SUQNCiAgICAgICAgRlJPTSAjREJDQ1Jlc3VsdHMNCiAgICApDQogICAgREVMRVRFIEZST00gREJDQ19DVEUgV0hFUkUgUm93SUQgPiAxOw0KDQoNCg0KRU5EDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVtQYWdlIFZlcmlmeSBPcHRpb25dLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENyZWF0ZSB0ZW1wb3JhcnkgdGFibGUgZm9yIFBhZ2UgVmVyaWZ5IE9wdGlvbg0KQ1JFQVRFIFRBQkxFICNEYXRhYmFzZVBhZ2VWZXJpZnlJbmZvICgNCiAgICBbRGF0YWJhc2UgTmFtZV0gTlZBUkNIQVIoMjU1KSwNCiAgICBbUGFnZSBWZXJpZnkgT3B0aW9uXSBOVkFSQ0hBUigyNTUpDQopOw0KDQotLSBJbnNlcnQgZGF0YSBpbnRvIHRoZSB0ZW1wb3JhcnkgdGFibGUNCklOU0VSVCBJTlRPICNEYXRhYmFzZVBhZ2VWZXJpZnlJbmZvDQpTRUxFQ1QNCiAgICBkYi5bbmFtZV0gQVMgW0RhdGFiYXNlIE5hbWVdLA0KICAgIGRiLnBhZ2VfdmVyaWZ5X29wdGlvbl9kZXNjIEFTIFtQYWdlIFZlcmlmeSBPcHRpb25dDQpGUk9NIHN5cy5kYXRhYmFzZXMgQVMgZGIgV0lUSCAoTk9MT0NLKQ0KT1JERVIgQlkgZGIuW25hbWVdIE9QVElPTiAoUkVDT01QSUxFKTsNCg0KDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVtEQiBDb21wYXRpYmlsaXR5IExldmVsXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgdGVtcG9yYXJ5IHRhYmxlIGZvciBDb21wYXRpYmlsaXR5IExldmVsDQpDUkVBVEUgVEFCTEUgI0RhdGFiYXNlQ29tcGF0aWJpbGl0eUluZm8gKA0KICAgIFtEYXRhYmFzZSBOYW1lXSBOVkFSQ0hBUigyNTUpLA0KICAgIFtEQiBDb21wYXRpYmlsaXR5IExldmVsXSBJTlQNCik7DQoNCi0tIEluc2VydCBkYXRhIGludG8gdGhlIHRlbXBvcmFyeSB0YWJsZQ0KSU5TRVJUIElOVE8gI0RhdGFiYXNlQ29tcGF0aWJpbGl0eUluZm8NClNFTEVDVA0KICAgIGRiLltuYW1lXSBBUyBbRGF0YWJhc2UgTmFtZV0sDQogICAgZGIuW2NvbXBhdGliaWxpdHlfbGV2ZWxdIEFTIFtEQiBDb21wYXRpYmlsaXR5IExldmVsXQ0KRlJPTSBzeXMuZGF0YWJhc2VzIEFTIGRiIFdJVEggKE5PTE9DSykNCk9SREVSIEJZIGRiLltuYW1lXSBPUFRJT04gKFJFQ09NUElMRSk7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1pc19hdXRvX3Nocmlua19vbi0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgdGVtcG9yYXJ5IHRhYmxlIGZvciBBdXRvIFNocmluayBpbmZvDQpDUkVBVEUgVEFCTEUgI0RhdGFiYXNlQXV0b1Nocmlua0luZm8gKA0KICAgIFtEYXRhYmFzZSBOYW1lXSBOVkFSQ0hBUigyNTUpLA0KICAgIGlzX2F1dG9fc2hyaW5rX29uIEJJVA0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjRGF0YWJhc2VBdXRvU2hyaW5rSW5mbw0KU0VMRUNUDQogICAgZGIuW25hbWVdIEFTIFtEYXRhYmFzZSBOYW1lXSwNCiAgICBkYi5pc19hdXRvX3Nocmlua19vbg0KRlJPTSBzeXMuZGF0YWJhc2VzIEFTIGRiIFdJVEggKE5PTE9DSykNCk9SREVSIEJZIGRiLltuYW1lXSBPUFRJT04gKFJFQ09NUElMRSk7DQoNCg0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0taXNfYXV0b19jbG9zZV9vbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgdGVtcG9yYXJ5IHRhYmxlIGZvciBBdXRvIENsb3NlIGluZm8NCkNSRUFURSBUQUJMRSAjRGF0YWJhc2VBdXRvQ2xvc2VJbmZvICgNCiAgICBbRGF0YWJhc2UgTmFtZV0gTlZBUkNIQVIoMjU1KSwNCiAgICBpc19hdXRvX2Nsb3NlX29uIEJJVA0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjRGF0YWJhc2VBdXRvQ2xvc2VJbmZvDQpTRUxFQ1QNCiAgICBkYi5bbmFtZV0gQVMgW0RhdGFiYXNlIE5hbWVdLA0KICAgIGRiLmlzX2F1dG9fY2xvc2Vfb24NCkZST00gc3lzLmRhdGFiYXNlcyBBUyBkYiBXSVRIIChOT0xPQ0spDQpPUkRFUiBCWSBkYi5bbmFtZV0gT1BUSU9OIChSRUNPTVBJTEUpOw0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tW1JlY292ZXJ5IE1vZGVsXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgYSB0ZW1wb3JhcnkgdGFibGUgZm9yIFJlY292ZXJ5IE1vZGVsDQpDUkVBVEUgVEFCTEUgI0RhdGFiYXNlTG9nSW5mbyAoDQogICAgW0RhdGFiYXNlIE5hbWVdIE5WQVJDSEFSKDI1NSksDQogICAgW1JlY292ZXJ5IE1vZGVsXSBOVkFSQ0hBUigyNTUpDQopOw0KDQotLSBJbnNlcnQgZGF0YSBpbnRvIHRoZSB0ZW1wb3JhcnkgdGFibGUNCklOU0VSVCBJTlRPICNEYXRhYmFzZUxvZ0luZm8NClNFTEVDVA0KICAgIGRiLltuYW1lXSBBUyBbRGF0YWJhc2UgTmFtZV0sDQogICAgZGIucmVjb3ZlcnlfbW9kZWxfZGVzYyBBUyBbUmVjb3ZlcnkgTW9kZWxdDQpGUk9NIHN5cy5kYXRhYmFzZXMgQVMgZGIgV0lUSCAoTk9MT0NLKQ0KSU5ORVIgSk9JTiBzeXMuZG1fb3NfcGVyZm9ybWFuY2VfY291bnRlcnMgQVMgbHUgV0lUSCAoTk9MT0NLKQ0KICAgIE9OIGRiLm5hbWUgPSBsdS5pbnN0YW5jZV9uYW1lDQpJTk5FUiBKT0lOIHN5cy5kbV9vc19wZXJmb3JtYW5jZV9jb3VudGVycyBBUyBscyBXSVRIIChOT0xPQ0spDQogICAgT04gZGIubmFtZSA9IGxzLmluc3RhbmNlX25hbWUNCkxFRlQgT1VURVIgSk9JTiBzeXMuZG1fZGF0YWJhc2VfZW5jcnlwdGlvbl9rZXlzIEFTIGRlIFdJVEggKE5PTE9DSykNCiAgICBPTiBkYi5kYXRhYmFzZV9pZCA9IGRlLmRhdGFiYXNlX2lkDQpXSEVSRSBsdS5jb3VudGVyX25hbWUgTElLRSBOJ0xvZyBGaWxlKHMpIFVzZWQgU2l6ZSAoS0IpJScNCiAgQU5EIGxzLmNvdW50ZXJfbmFtZSBMSUtFIE4nTG9nIEZpbGUocykgU2l6ZSAoS0IpJScNCiAgQU5EIGxzLmNudHJfdmFsdWUgPiAwDQpPUkRFUiBCWSBkYi5bbmFtZV0gT1BUSU9OIChSRUNPTVBJTEUpOw0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tW0pvYiBIaXN0b3J5XS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQotLSBDcmVhdGUgYSB0ZW1wb3JhcnkgdGFibGUgZm9yIEpvYiBIaXN0b3J5DQpDUkVBVEUgVEFCTEUgI0pvYkhpc3RvcnkgKA0KICAgIEpvYk5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBMYXN0UnVuRHVyYXRpb24gTlZBUkNIQVIoMjApLA0KICAgIExhc3RSdW5UaW1lIERBVEVUSU1FLA0KICAgIFJ1blN0YXR1cyBOVkFSQ0hBUig1MCksDQogICAgU3RhdHVzIE5WQVJDSEFSKDUwKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGVtcG9yYXJ5IHRhYmxlDQpJTlNFUlQgSU5UTyAjSm9iSGlzdG9yeQ0KU0VMRUNUIA0KICAgIHNqby5uYW1lIEFTIEpvYk5hbWUsDQogICAgSVNOVUxMKA0KICAgICAgICBDQVNFDQogICAgICAgICAgICBXSEVOIE1BWChzamgucnVuX2R1cmF0aW9uKSBJUyBOVUxMIFRIRU4gJ05PTkUnDQogICAgICAgICAgICBFTFNFIENPTlZFUlQoVkFSQ0hBUigyMCksIE1BWChzamgucnVuX2R1cmF0aW9uKSAvIDEwMDAwKSArICc6JyArIA0KICAgICAgICAgICAgICAgICBSSUdIVCgnMCcgKyBDT05WRVJUKFZBUkNIQVIoMiksIChNQVgoc2poLnJ1bl9kdXJhdGlvbikgLyAxMDApICUgMTAwKSwgMikgKyAnOicgKw0KICAgICAgICAgICAgICAgICBSSUdIVCgnMCcgKyBDT05WRVJUKFZBUkNIQVIoMiksIE1BWChzamgucnVuX2R1cmF0aW9uKSAlIDEwMCksIDIpDQogICAgICAgIEVORCwgJ05PTkUnKSBBUyBMYXN0UnVuRHVyYXRpb24sDQogICAgSVNOVUxMKA0KICAgICAgICBDQVNFDQogICAgICAgICAgICBXSEVOIE1BWChtc2RiLmRiby5hZ2VudF9kYXRldGltZShydW5fZGF0ZSwgcnVuX3RpbWUpKSBJUyBOVUxMIFRIRU4gJzE5MDAtMDEtMDEgMDA6MDA6MDAnDQogICAgICAgICAgICBFTFNFIE1BWChtc2RiLmRiby5hZ2VudF9kYXRldGltZShydW5fZGF0ZSwgcnVuX3RpbWUpKQ0KICAgICAgICBFTkQsICcxOTAwLTAxLTAxIDAwOjAwOjAwJykgQVMgTGFzdFJ1blRpbWUsDQogICAgSVNOVUxMKENBU0Ugc2poLnJ1bl9zdGF0dXMNCiAgICAgICAgV0hFTiAwIFRIRU4gJ0ZhaWxlZCcNCiAgICAgICAgV0hFTiAxIFRIRU4gJ1N1Y2NlZWRlZCcNCiAgICAgICAgRUxTRSAnTk9ORScNCiAgICBFTkQsICdOT05FJykgQVMgUnVuU3RhdHVzLA0KICAgIElTTlVMTChDQVNFIE1BWChzam8uZW5hYmxlZCkNCiAgICAgICAgV0hFTiAxIFRIRU4gJ0VuYWJsZScNCiAgICAgICAgV0hFTiAwIFRIRU4gJ0Rpc2FibGUnDQogICAgICAgIEVMU0UgJ05PTkUnDQogICAgRU5ELCAnTk9ORScpIEFTIFN0YXR1cw0KRlJPTSBtc2RiLmRiby5zeXNqb2JzIHNqbw0KTEVGVCBKT0lOIG1zZGIuZGJvLnN5c2pvYmhpc3Rvcnkgc2poIE9OIHNqby5qb2JfaWQgPSBzamguam9iX2lkDQpHUk9VUCBCWSBzam8ubmFtZSwgc2poLnJ1bl9zdGF0dXMNCk9SREVSIEJZIExhc3RSdW5EdXJhdGlvbiBERVNDOw0KDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLU9ycGhhbiBVc2VycyBFUy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpDUkVBVEUgVEFCTEUgI09SUEhBTlVTRVIgKA0KICAgIERCTkFNRSBWQVJDSEFSKDEwMCksDQogICAgVVNFUk5BTUUgVkFSQ0hBUigxMDApLA0KICAgIENSRUFURURBVEUgVkFSQ0hBUigxMDApLA0KICAgIFVTRVJUWVBFIFZBUkNIQVIoMTAwKQ0KKTsNCg0KLS0gSW5zZXJ0IGRhdGEgaW50byB0aGUgdGFibGUNCkVYRUMgc3BfTVNmb3JlYWNoZGIgJw0KVVNFIFs/XTsNCklOU0VSVCBJTlRPICNPUlBIQU5VU0VSDQpTRUxFQ1QgDQogICAgREJfTkFNRSgpIEFTIERCTkFNRSwgDQogICAgTkFNRSBBUyBVU0VSTkFNRSwgDQogICAgQ1JFQVRFREFURSwgDQogICAgQ0FTRSAgDQogICAgICAgIFdIRU4gSVNOVEdST1VQID0gMCBBTkQgSVNOVFVTRVIgPSAwIFRIRU4gJydTUUwgTE9HSU4nJyANCiAgICAgICAgV0hFTiBJU05UR1JPVVAgPSAxIFRIRU4gJydOVCBHUk9VUCcnIA0KICAgICAgICBXSEVOIElTTlRHUk9VUCA9IDAgQU5EIElTTlRVU0VSID0gMSBUSEVOICcnTlQgTE9HSU4nJyANCiAgICBFTkQgQVMgVVNFUlRZUEUNCkZST00gc3lzLnN5c3VzZXJzIA0KV0hFUkUgU0lEIElTIE5PVCBOVUxMIA0KICBBTkQgU0lEIDw+IDBYMCANCiAgQU5EIElTTE9HSU4gPSAxIA0KICBBTkQgU0lEIE5PVCBJTiAoU0VMRUNUIFNJRCBGUk9NIHN5cy5zeXNsb2dpbnMpIA0KICBBTkQgTkFNRSBOT1QgSU4gKCcnZGJvJycsICcnTVNfRGF0YUNvbGxlY3RvckludGVybmFsVXNlcicnKSANCic7DQoNCg0KDQoNCg0KDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1zZWN1cml0eUF1ZGl0SEMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KQ1JFQVRFIFRBQkxFICNFbXB0eVBhc3N3b3JkTG9naW5zICgNCiAgICBuYW1lIE5WQVJDSEFSKDI1NSksDQogICAgdHlwZV9kZXNjIE5WQVJDSEFSKDI1NSksDQogICAgY3JlYXRlX2RhdGUgREFURVRJTUUsDQogICAgbW9kaWZ5X2RhdGUgREFURVRJTUUNCik7DQoNCkJFR0lOIFRSWQ0KICAgIElOU0VSVCBJTlRPICNFbXB0eVBhc3N3b3JkTG9naW5zDQogICAgU0VMRUNUIG5hbWUsIHR5cGVfZGVzYywgY3JlYXRlX2RhdGUsIG1vZGlmeV9kYXRlDQogICAgRlJPTSBzeXMuc3FsX2xvZ2lucw0KRU5EIFRSWQ0KQkVHSU4gQ0FUQ0gNCiAgICBQUklOVCAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY2hlY2tpbmcgZm9yIGVtcHR5IHBhc3N3b3Jkcy4nOw0KRU5EIENBVENIDQpDUkVBVEUgVEFCTEUgI1NhbWVQYXNzd29yZExvZ2lucyAoDQogICAgbmFtZSBOVkFSQ0hBUigyNTUpLA0KICAgIHR5cGVfZGVzYyBOVkFSQ0hBUigyNTUpLA0KICAgIGNyZWF0ZV9kYXRlIERBVEVUSU1FLA0KICAgIG1vZGlmeV9kYXRlIERBVEVUSU1FDQoNCik7DQoNCkJFR0lOIFRSWQ0KICAgIElOU0VSVCBJTlRPICNTYW1lUGFzc3dvcmRMb2dpbnMNCiAgICBTRUxFQ1QgbmFtZSwgdHlwZV9kZXNjLCBjcmVhdGVfZGF0ZSwgbW9kaWZ5X2RhdGUNCiAgICBGUk9NIHN5cy5zcWxfbG9naW5zDQogICAgV0hFUkUgUFdEQ09NUEFSRShuYW1lLCBwYXNzd29yZF9oYXNoKSA9IDE7IC0tIENoZWNrIGZvciB1c2VybmFtZS1wYXNzd29yZCBtYXRjaGVzDQoNCg0KRU5EIFRSWQ0KQkVHSU4gQ0FUQ0gNCiAgICBQUklOVCAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgY2hlY2tpbmcgZm9yIHVzZXJuYW1lLXBhc3N3b3JkIG1hdGNoZXMuJzsNCkVORCBDQVRDSA0KDQpDUkVBVEUgVEFCTEUgI1BvbGljeU5vdENoZWNrZWRMb2dpbnMgKA0KICAgIG5hbWUgTlZBUkNIQVIoMjU1KSwNCiAgICBpc19wb2xpY3lfY2hlY2tlZCBCSVQsDQogICAgaXNfZXhwaXJhdGlvbl9jaGVja2VkIEJJVA0KKTsNCg0KQkVHSU4gVFJZDQogICAgSU5TRVJUIElOVE8gI1BvbGljeU5vdENoZWNrZWRMb2dpbnMNCiAgICBTRUxFQ1QgW25hbWVdLCBpc19wb2xpY3lfY2hlY2tlZCwgaXNfZXhwaXJhdGlvbl9jaGVja2VkDQogICAgRlJPTSBzeXMuc3FsX2xvZ2lucw0KICAgIFdIRVJFIGlzX3BvbGljeV9jaGVja2VkID0gMDsgLS0gQ2hlY2sgZm9yIGxvZ2lucyB3aXRob3V0IHBvbGljeSBlbmZvcmNlbWVudA0KDQoNCkVORCBUUlkNCkJFR0lOIENBVENIDQogICAgUFJJTlQgJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIGNoZWNraW5nIGZvciBsb2dpbnMgd2l0aG91dCBlbmZvcmNlZCBwb2xpY2llcy4nOw0KRU5EIENBVENIDQoNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tRGlzYWJsZSBMb2dpbnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KQ1JFQVRFIFRBQkxFICNTZXJ2ZXJMb2dpbnMgKA0KICAgIHNpZF8gVkFSQ0hBUig0MDApLA0KICAgIG5hbWUgU1lTTkFNRSwNCiAgICBpc19kaXNhYmxlZCBJTlQsDQogICAgdHlwZV9kZXNjIFZBUkNIQVIoNjApLA0KICAgIGNyZWF0ZV9kYXRlIERBVEVUSU1FLA0KICAgIG1vZGlmeV9kYXRlIERBVEVUSU1FLA0KICAgIHNlcnZlcl9yb2xlcyBWQVJDSEFSKE1BWCksDQogICAgZGJfcm9sZXMgVkFSQ0hBUihNQVgpDQopOw0KDQpDUkVBVEUgVEFCTEUgI0RCTGV2ZWxQZXJtaXNzaW9ucyAoDQogICAgc2lkXyBWQVJDSEFSKDQwMCksDQogICAgREJOYW1lIFNZU05BTUUsDQogICAgREJSb2xlIFNZU05BTUUsDQogICAgTWVtYmVyTmFtZSBTWVNOQU1FDQopOw0KDQotLSBHYXRoZXIgc2VydmVyLWxldmVsIHBlcm1pc3Npb25zDQpTRUxFQ1Qgc2lkLCBDT05WRVJUKFNZU05BTUUsIExHTi5uYW1lKSBBUyBOYW1lLCBTVVNFUl9OQU1FKFJNLnJvbGVfcHJpbmNpcGFsX2lkKSBBUyBSb2xlTmFtZQ0KSU5UTyAjU2VydmVyTGV2ZWxQZXJtaXNzaW9ucw0KRlJPTSBzeXMuc2VydmVyX3JvbGVfbWVtYmVycyBSTQ0KSU5ORVIgSk9JTiBzeXMuc2VydmVyX3ByaW5jaXBhbHMgTEdODQogICAgT04gUk0ubWVtYmVyX3ByaW5jaXBhbF9pZCA9IExHTi5wcmluY2lwYWxfaWQNCldIRVJFIFJNLnJvbGVfcHJpbmNpcGFsX2lkID49IDMgQU5EIFJNLnJvbGVfcHJpbmNpcGFsX2lkIDw9IDEwOw0KDQotLSBHYXRoZXIgc2VydmVyIHByaW5jaXBhbHMNClNFTEVDVCBzaWQsIG5hbWUsIGlzX2Rpc2FibGVkLCB0eXBlX2Rlc2MsIGNyZWF0ZV9kYXRlLCBtb2RpZnlfZGF0ZQ0KSU5UTyAjU2VydmVyUHJpbmNpcGFscw0KRlJPTSBzeXMuc2VydmVyX3ByaW5jaXBhbHMNCldIRVJFIHR5cGUgTk9UIElOICgnQycsICdSJykNCiAgQU5EIG5hbWUgTk9UIElOICgnc2EnLCAncmVjb24nLCAnIyNNU19Qb2xpY3lUc3FsRXhlY3V0aW9uTG9naW4jIycsICcjI01TX1BvbGljeUV2ZW50UHJvY2Vzc2luZ0xvZ2luIyMnLA0KICAgICAgICAgICAgICAgICAgICdOVCBBVVRIT1JJVFlcXFNZU1RFTScsICdOVCBBVVRIT1JJVFlcXE5FVFdPUksgU0VSVklDRScsDQogICAgICAgICAgICAgICAgICAgJ05UIFNFUlZJQ0VcXE1TU1FMU0VSVkVSJywgJ05UIFNFUlZJQ0VcXFNRTFNFUlZFUkFHRU5UJyk7DQoNCi0tIEdhdGhlciBkYXRhYmFzZS1sZXZlbCBwZXJtaXNzaW9ucw0KRVhFQyBzcF9NU2ZvcmVhY2hkYiAnVVNFIFs/XTsNCklOU0VSVCBJTlRPICNEQkxldmVsUGVybWlzc2lvbnMNClNFTEVDVCB1LnNpZCwgREJfTkFNRSgpIEFTIERCTmFtZSwgZy5uYW1lIEFTIERCUm9sZSwgdS5uYW1lIEFTIE1lbWJlck5hbWUNCkZST00gc3lzLmRhdGFiYXNlX3ByaW5jaXBhbHMgdQ0KSU5ORVIgSk9JTiBzeXMuZGF0YWJhc2Vfcm9sZV9tZW1iZXJzIG0gT04gdS5wcmluY2lwYWxfaWQgPSBtLm1lbWJlcl9wcmluY2lwYWxfaWQNCklOTkVSIEpPSU4gc3lzLmRhdGFiYXNlX3ByaW5jaXBhbHMgZyBPTiBnLnByaW5jaXBhbF9pZCA9IG0ucm9sZV9wcmluY2lwYWxfaWQ7JzsNCg0KLS0gUHJvY2VzcyBsb2dpbiBpbmZvcm1hdGlvbg0KREVDTEFSRSBAc3RyMSBWQVJDSEFSKE1BWCksIEBzdHIyIFZBUkNIQVIoTUFYKSwgQHNpZF8gVkFSQ0hBUig0MDApLCBAbmFtZSBTWVNOQU1FOw0KREVDTEFSRSBAaXNfZGlzYWJsZWQgSU5ULCBAdHlwZV9kZXNjIFZBUkNIQVIoNjApLCBAY3JlYXRlX2RhdGUgREFURVRJTUUsIEBtb2RpZnlfZGF0ZSBEQVRFVElNRTsNClNFVCBAc3RyMSA9ICcnOw0KU0VUIEBzdHIyID0gJyc7DQoNCkRFQ0xBUkUgQ3Vyc29yWCBDVVJTT1IgRk9SDQpTRUxFQ1Qgc2lkLCBuYW1lLCBpc19kaXNhYmxlZCwgdHlwZV9kZXNjLCBjcmVhdGVfZGF0ZSwgbW9kaWZ5X2RhdGUNCkZST00gI1NlcnZlclByaW5jaXBhbHM7DQoNCk9QRU4gQ3Vyc29yWDsNCkZFVENIIE5FWFQgRlJPTSBDdXJzb3JYIElOVE8gQHNpZF8sIEBuYW1lLCBAaXNfZGlzYWJsZWQsIEB0eXBlX2Rlc2MsIEBjcmVhdGVfZGF0ZSwgQG1vZGlmeV9kYXRlOw0KDQpXSElMRSBAQEZFVENIX1NUQVRVUyA9IDANCkJFR0lODQogICAgU0VUIEBzdHIxID0gJyc7DQogICAgU0VMRUNUIEBzdHIxICs9IFJvbGVOYW1lICsgJywnIEZST00gI1NlcnZlckxldmVsUGVybWlzc2lvbnMgV0hFUkUgTmFtZSA9IENPTlZFUlQoU1lTTkFNRSwgQG5hbWUpOw0KICAgIElGIEBzdHIxIDw+ICcnIFNFVCBAc3RyMSA9IExFRlQoQHN0cjEsIExFTihAc3RyMSkgLSAxKTsNCg0KICAgIFNFVCBAc3RyMiA9ICcnOw0KICAgIFNFTEVDVCBAc3RyMiArPSBEQk5hbWUgKyAnKCcnJyArIERCUm9sZSArICcnJyksJyBGUk9NICNEQkxldmVsUGVybWlzc2lvbnMgV0hFUkUgc2lkXyA9IENPTlZFUlQoVkFSQ0hBUig0MDApLCBAc2lkXyk7DQogICAgSUYgQHN0cjIgPD4gJycgU0VUIEBzdHIyID0gTEVGVChAc3RyMiwgTEVOKEBzdHIyKSAtIDEpOw0KDQogICAgSU5TRVJUIElOVE8gI1NlcnZlckxvZ2lucw0KICAgIFNFTEVDVCBAc2lkXywgQG5hbWUsIEBpc19kaXNhYmxlZCwgQHR5cGVfZGVzYywgQGNyZWF0ZV9kYXRlLCBAbW9kaWZ5X2RhdGUsIEBzdHIxLCBAc3RyMjsNCg0KICAgIEZFVENIIE5FWFQgRlJPTSBDdXJzb3JYIElOVE8gQHNpZF8sIEBuYW1lLCBAaXNfZGlzYWJsZWQsIEB0eXBlX2Rlc2MsIEBjcmVhdGVfZGF0ZSwgQG1vZGlmeV9kYXRlOw0KRU5EDQoNCkNMT1NFIEN1cnNvclg7DQpERUFMTE9DQVRFIEN1cnNvclg7DQoNCi0tIFJldHVybiBkaXNhYmxlZCBsb2dpbnMNCg0KDQoNCg0KDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVN5c3RlbSBkaXNrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KREVDTEFSRSBASW5pdGlhbEFkdmFuY2VkT3B0aW9uc1NldHRpbmcgQklUOw0KREVDTEFSRSBASW5pdGlhbFhwQ21kU2hlbGxTZXR0aW5nIEJJVDsNCg0KLS0gQ2hlY2sgJ3Nob3cgYWR2YW5jZWQgb3B0aW9ucycgYW5kICd4cF9jbWRzaGVsbCcgc3RhdHVzZXMNClNFTEVDVCBASW5pdGlhbEFkdmFuY2VkT3B0aW9uc1NldHRpbmcgPSBDT05WRVJUKEJJVCwgdmFsdWVfaW5fdXNlKQ0KRlJPTSBzeXMuY29uZmlndXJhdGlvbnMNCldIRVJFIG5hbWUgPSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJzsNCg0KU0VMRUNUIEBJbml0aWFsWHBDbWRTaGVsbFNldHRpbmcgPSBDT05WRVJUKEJJVCwgdmFsdWVfaW5fdXNlKQ0KRlJPTSBzeXMuY29uZmlndXJhdGlvbnMNCldIRVJFIG5hbWUgPSAneHBfY21kc2hlbGwnOw0KDQotLSBFbmFibGUgJ3Nob3cgYWR2YW5jZWQgb3B0aW9ucycgaWYgZGlzYWJsZWQNCklGIEBJbml0aWFsQWR2YW5jZWRPcHRpb25zU2V0dGluZyA9IDANCkJFR0lODQogICAgRVhFQyBzcF9jb25maWd1cmUgJ3Nob3cgYWR2YW5jZWQgb3B0aW9ucycsIDE7DQogICAgUkVDT05GSUdVUkU7DQpFTkQNCg0KLS0gRW5hYmxlICd4cF9jbWRzaGVsbCcgaWYgZGlzYWJsZWQNCklGIEBJbml0aWFsWHBDbWRTaGVsbFNldHRpbmcgPSAwDQpCRUdJTg0KICAgIEVYRUMgc3BfY29uZmlndXJlICd4cF9jbWRzaGVsbCcsIDE7DQogICAgUkVDT05GSUdVUkU7DQpFTkQNCg0KLS0gQ3JlYXRlIGEgdGVtcG9yYXJ5IHRhYmxlDQpDUkVBVEUgVEFCTEUgI1N5c3RlbURyaXZlICgNCiAgICBPdXRwdXQgTlZBUkNIQVIoTUFYKQ0KKTsNCg0KLS0gR2V0IHRoZSBzeXN0ZW0gZHJpdmUgYW5kIHN0b3JlIGl0IGluIHRoZSB0YWJsZQ0KSU5TRVJUIElOVE8gI1N5c3RlbURyaXZlDQpFWEVDIHhwX2NtZHNoZWxsICdwb3dlcnNoZWxsIC1Db21tYW5kICJbU3lzdGVtLkVudmlyb25tZW50XTo6R2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIlN5c3RlbURyaXZlXCIpIic7DQoNCi0tIFJlbW92ZSBOVUxMIG9yIGVtcHR5IHJvd3MNCkRFTEVURSBGUk9NICNTeXN0ZW1Ecml2ZSBXSEVSRSBPdXRwdXQgSVMgTlVMTCBPUiBMVFJJTShSVFJJTShPdXRwdXQpKSA9ICcnOw0KDQotLSBSZXN0b3JlICd4cF9jbWRzaGVsbCcgYW5kICdzaG93IGFkdmFuY2VkIG9wdGlvbnMnIHRvIGluaXRpYWwgc2V0dGluZ3MNCklGIEBJbml0aWFsWHBDbWRTaGVsbFNldHRpbmcgPSAwDQpCRUdJTg0KICAgIEVYRUMgc3BfY29uZmlndXJlICd4cF9jbWRzaGVsbCcsIDA7DQogICAgUkVDT05GSUdVUkU7DQpFTkQNCg0KSUYgQEluaXRpYWxBZHZhbmNlZE9wdGlvbnNTZXR0aW5nID0gMA0KQkVHSU4NCiAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMDsNCiAgICBSRUNPTkZJR1VSRTsNCkVORA0KDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1BbmxpayBDYWxpc2FuIEJhY2t1cC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENyZWF0ZSBhIHRlbXBvcmFyeSB0YWJsZSBmb3IgcnVubmluZyBiYWNrdXAgbG9ncw0KQ1JFQVRFIFRBQkxFICNCYWNrdXBMb2dSdW5uaW5nICgNCiAgICBzZXNzaW9uX2lkIElOVCwNCiAgICBzdGFydF90aW1lIERBVEVUSU1FLA0KICAgIHN0YXR1cyBOVkFSQ0hBUig1MCksDQogICAgY29tbWFuZCBOVkFSQ0hBUigyNTUpLA0KICAgIGRhdGFiYXNlX2lkIElOVCwNCiAgICBkYXRhYmFzZV9uYW1lIE5WQVJDSEFSKDI1NSksDQogICAgcGVyY2VudF9jb21wbGV0ZSBGTE9BVCwNCiAgICB3YWl0X3R5cGUgTlZBUkNIQVIoMjU1KSwNCiAgICB3YWl0X3RpbWUgSU5ULA0KICAgIHdhaXRfcmVzb3VyY2UgTlZBUkNIQVIoMjU1KQ0KKTsNCg0KLS0gVmVyaSBla2xlDQpJTlNFUlQgSU5UTyAjQmFja3VwTG9nUnVubmluZw0KU0VMRUNUDQogICAgci5zZXNzaW9uX2lkLA0KICAgIElTTlVMTChyLnN0YXJ0X3RpbWUsICcxOTAwLTAxLTAxIDAwOjAwOjAwJykgQVMgc3RhcnRfdGltZSwNCiAgICBJU05VTEwoci5zdGF0dXMsICdOT05FJykgQVMgc3RhdHVzLA0KICAgIElTTlVMTChyLmNvbW1hbmQsICdOT05FJykgQVMgY29tbWFuZCwNCiAgICByLmRhdGFiYXNlX2lkLA0KICAgIElTTlVMTChkYi5uYW1lLCAnTk9ORScpIEFTIGRhdGFiYXNlX25hbWUsDQogICAgSVNOVUxMKHIucGVyY2VudF9jb21wbGV0ZSwgMCkgQVMgcGVyY2VudF9jb21wbGV0ZSwNCiAgICBJU05VTEwoci53YWl0X3R5cGUsICdOT05FJykgQVMgd2FpdF90eXBlLA0KICAgIElTTlVMTChyLndhaXRfdGltZSwgMCkgQVMgd2FpdF90aW1lLA0KICAgIElTTlVMTChyLndhaXRfcmVzb3VyY2UsICdOT05FJykgQVMgd2FpdF9yZXNvdXJjZQ0KRlJPTSBzeXMuZG1fZXhlY19yZXF1ZXN0cyByDQpMRUZUIEpPSU4gc3lzLmRhdGFiYXNlcyBkYiAtLSBJTk5FUiB5ZXJpbmUgTEVGVCBKT0lOIGt1bGxhbmFyYWsgTlVMTCBkZcSfZXJsZXJpIGFsxLFuDQogICAgT04gci5kYXRhYmFzZV9pZCA9IGRiLmRhdGFiYXNlX2lkDQpXSEVSRSByLmNvbW1hbmQgTElLRSAnQkFDS1VQIExPRycNCiAgQU5EIHIuc3RhdHVzPSdydW5uaW5nJzsNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tcG93ZXJwbGFuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIENoZWNrIHRoZSBjdXJyZW50IHN0YXR1cyBvZiAneHBfY21kc2hlbGwnDQpTRUxFQ1QgQHhwQ21kU2hlbGxFbmFibGVkID0gQ0FTVCh2YWx1ZV9pbl91c2UgQVMgSU5UKQ0KRlJPTSBzeXMuY29uZmlndXJhdGlvbnMNCldIRVJFIG5hbWUgPSAneHBfY21kc2hlbGwnOw0KDQotLSBUZW1wb3JhcmlseSBlbmFibGUgJ3hwX2NtZHNoZWxsJyBpZiBkaXNhYmxlZA0KSUYgQHhwQ21kU2hlbGxFbmFibGVkID0gMA0KQkVHSU4NCiAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMTsNCiAgICBSRUNPTkZJR1VSRTsNCiAgICBFWEVDIHNwX2NvbmZpZ3VyZSAneHBfY21kc2hlbGwnLCAxOw0KICAgIFJFQ09ORklHVVJFOw0KRU5EDQoNCi0tIENyZWF0ZSBhIHRlbXBvcmFyeSB0YWJsZSBmb3IgUG93ZXJTaGVsbCBvdXRwdXQNCkNSRUFURSBUQUJMRSAjUG93ZXJTaGVsbE91dHB1dCAoDQogICAgT3V0cHV0IE5WQVJDSEFSKE1BWCkNCik7DQoNCi0tIEV4ZWN1dGUgdGhlIFBvd2VyU2hlbGwgY29tbWFuZCBhbmQgc3RvcmUgdGhlIG91dHB1dA0KSU5TRVJUIElOVE8gI1Bvd2VyU2hlbGxPdXRwdXQNCkVYRUMgeHBfY21kc2hlbGwgJ3Bvd2Vyc2hlbGwgLUNvbW1hbmQgInBvd2VyY2ZnIC9HZXRBY3RpdmVTY2hlbWUiJzsNCg0KDQotLSBSZXN0b3JlICd4cF9jbWRzaGVsbCcgdG8gaXRzIGluaXRpYWwgc3RhdGUNCklGIEB4cENtZFNoZWxsRW5hYmxlZCA9IDANCkJFR0lODQogICAgRVhFQyBzcF9jb25maWd1cmUgJ3hwX2NtZHNoZWxsJywgMDsNCiAgICBSRUNPTkZJR1VSRTsNCiAgICBFWEVDIHNwX2NvbmZpZ3VyZSAnc2hvdyBhZHZhbmNlZCBvcHRpb25zJywgMDsNCiAgICBSRUNPTkZJR1VSRTsNCkVORA0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tVkxGIENvdW50cy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpDUkVBVEUgVEFCTEUgI1ZMRkluZm8gKA0KICAgIFJlY292ZXJ5VW5pdElEIElOVCwNCiAgICBGaWxlSUQgSU5ULA0KICAgIEZpbGVTaXplIEJJR0lOVCwNCiAgICBTdGFydE9mZnNldCBCSUdJTlQsDQogICAgRlNlcU5vIEJJR0lOVCwNCiAgICBbU3RhdHVzXSBCSUdJTlQsDQogICAgUGFyaXR5IEJJR0lOVCwNCiAgICBDcmVhdGVMU04gTlVNRVJJQygzOCkNCik7DQoNCkNSRUFURSBUQUJMRSAjVkxGQ291bnRSZXN1bHRzICgNCiAgICBEYXRhYmFzZU5hbWUgU1lTTkFNRSwNCiAgICBWTEZDb3VudCBJTlQNCik7DQoNCi0tIEluc2VydCBWTEYgY291bnRzIGludG8gdGhlIHRlbXBvcmFyeSB0YWJsZQ0KRVhFQyBzcF9NU2ZvcmVhY2hkYiBOJ1VTRSBbP107DQoJSUYgREJfSUQgKCcnPycnKSBOT1QgSU4gKDIsMywzMjc2NykNCglCRUdJTg0KCUJFR0lOIFRSWQ0KICAgIElOU0VSVCBJTlRPICNWTEZJbmZvDQogICAgRVhFQyBzcF9leGVjdXRlc3FsIE4nJ0RCQ0MgTE9HSU5GTyhbP10pJyc7DQoNCiAgICBJTlNFUlQgSU5UTyAjVkxGQ291bnRSZXN1bHRzDQogICAgU0VMRUNUIERCX05BTUUoKSwgQ09VTlQoKikNCiAgICBGUk9NICNWTEZJbmZvOw0KCUVORCBUUlkNCglCRUdJTiBDQVRDSA0KCXByaW50IEVycm9yX21lc3NhZ2UoKQ0KCUVORCBDQVRDSA0KCUVORDsNCiAgICBUUlVOQ0FURSBUQUJMRSAjVkxGSW5mbzsnOw0KDQoNCg0KDQoNCiAgICAtLSBTb251w6dsYXLEsSBkw7ZuZMO8cg0KU0VMRUNUICogRlJPTSAjQWx3YXlzT25JbmZvOw0KU0VMRUNUICogRlJPTSAjU2VydmVySW5mbzsNClNFTEVDVCAqIEZST00gI1NlcnZlckNvbmZpZ3VyYXRpb247DQpTRUxFQ1QgKiBGUk9NICNUb3RhbE1lbW9yeTsNClNFTEVDVCAqIEZST00gI01pblNlcnZlck1lbW9yeTsNClNFTEVDVCAqIEZST00gI01heFNlcnZlck1lbW9yeTsNClNFTEVDVCAqIEZST00gI0JhY2t1cENvbXByZXNzaW9uSW5mbzsNClNFTEVDVCAqIEZST00gI0RhdGFiYXNlQ1BVVXNhZ2U7DQpTRUxFQ1QgKiBGUk9NICNEYXRhYmFzZUZpbGVJbmZvOw0KU0VMRUNUICogRlJPTSAjQmFja3VwRGV0YWlsczsNClNFTEVDVCAqIEZST00gI0RhdGFiYXNlU2l6ZUluZm87DQpTRUxFQ1QgKiBGUk9NICNCYWNrdXBTdGF0czsNClNFTEVDVCAqIEZST00gI0RlYWRsb2NrUGVyZm9ybWFuY2U7DQpTRUxFQ1QgKiBGUk9NICNEYXRhYmFzZVBhZ2VWZXJpZnlJbmZvOw0KU0VMRUNUICogRlJPTSAjRGF0YWJhc2VDb21wYXRpYmlsaXR5SW5mbzsNClNFTEVDVCAqIEZST00gI0RhdGFiYXNlQXV0b1Nocmlua0luZm87DQpTRUxFQ1QgKiBGUk9NICNEYXRhYmFzZUF1dG9DbG9zZUluZm87DQpTRUxFQ1QgKiBGUk9NICNEYXRhYmFzZUxvZ0luZm87DQpTRUxFQ1QgKiBGUk9NICNKb2JIaXN0b3J5Ow0KU0VMRUNUICogRlJPTSAjREJDQ1Jlc3VsdHM7DQoNCg0KU0VMRUNUIG5hbWUsIHR5cGVfZGVzYywgc2VydmVyX3JvbGVzLCBkYl9yb2xlcywNCiAgICAgICBDQVNFIFdIRU4gaXNfZGlzYWJsZWQgPSAwIFRIRU4gJ0VuYWJsZScgRUxTRSAnRGlzYWJsZScgRU5EIEFTIExvZ2luU3RhdHVzDQpGUk9NICNTZXJ2ZXJMb2dpbnMNCldIRVJFIGlzX2Rpc2FibGVkID0gMQ0KT1JERVIgQlkgbmFtZTsNClNFTEVDVCAqIEZST00gI09SUEhBTlVTRVI7DQpTRUxFQ1QgKiBGUk9NICNWTEZDb3VudFJlc3VsdHM7DQoNClNFTEVDVCAqIEZST00gI1N5c3RlbURyaXZlOw0KU0VMRUNUICogRlJPTSAjQmFja3VwTG9nUnVubmluZzsNClNFTEVDVCAqIEZST00gI1Bvd2VyU2hlbGxPdXRwdXQ7DQpTRUxFQ1QgKiBGUk9NICNFbXB0eVBhc3N3b3JkTG9naW5zOw0KU0VMRUNUICogRlJPTSAjU2FtZVBhc3N3b3JkTG9naW5zOw0KU0VMRUNUICogRlJPTSAjUG9saWN5Tm90Q2hlY2tlZExvZ2luczsNCg0KDQotLSBHZcOnaWNpIHRhYmxveXUgdGVtaXpsZQ0KRFJPUCBUQUJMRSAjQWx3YXlzT25JbmZvOw0KRFJPUCBUQUJMRSAjU2VydmVySW5mbzsNCkRST1AgVEFCTEUgI1NlcnZlckNvbmZpZ3VyYXRpb247DQpEUk9QIFRBQkxFICNUb3RhbE1lbW9yeTsNCkRST1AgVEFCTEUgI01pblNlcnZlck1lbW9yeTsNCkRST1AgVEFCTEUgI01heFNlcnZlck1lbW9yeTsNCkRST1AgVEFCTEUgI0JhY2t1cENvbXByZXNzaW9uSW5mbzsNCkRST1AgVEFCTEUgI0RhdGFiYXNlQ1BVVXNhZ2U7DQpEUk9QIFRBQkxFICNEYXRhYmFzZUZpbGVJbmZvOw0KRFJPUCBUQUJMRSAjQmFja3VwRGV0YWlsczsNCkRST1AgVEFCTEUgI0RhdGFiYXNlU2l6ZUluZm87DQpEUk9QIFRBQkxFICNCYWNrdXBTdGF0czsNCkRST1AgVEFCTEUgI0RlYWRsb2NrUGVyZm9ybWFuY2U7DQpEUk9QIFRBQkxFICNEQkNDUmVzdWx0czsNCkRST1AgVEFCTEUgI3RlbXA7DQpEUk9QIFRBQkxFICNEYXRhYmFzZVBhZ2VWZXJpZnlJbmZvOw0KRFJPUCBUQUJMRSAjRGF0YWJhc2VDb21wYXRpYmlsaXR5SW5mbzsNCkRST1AgVEFCTEUgI0RhdGFiYXNlQXV0b1Nocmlua0luZm87DQpEUk9QIFRBQkxFICNEYXRhYmFzZUF1dG9DbG9zZUluZm87DQpEUk9QIFRBQkxFICNEYXRhYmFzZUxvZ0luZm87DQpEUk9QIFRBQkxFICNKb2JIaXN0b3J5Ow0KRFJPUCBUQUJMRSAjT1JQSEFOVVNFUjsNCkRST1AgVEFCTEUgI1ZMRkluZm87DQpEUk9QIFRBQkxFICNWTEZDb3VudFJlc3VsdHM7DQpEUk9QIFRBQkxFICNFbXB0eVBhc3N3b3JkTG9naW5zOw0KRFJPUCBUQUJMRSAjU2FtZVBhc3N3b3JkTG9naW5zOw0KRFJPUCBUQUJMRSAjUG9saWN5Tm90Q2hlY2tlZExvZ2luczsNCkRST1AgVEFCTEUgI1N5c3RlbURyaXZlOw0KRFJPUCBUQUJMRSAjQmFja3VwTG9nUnVubmluZzsNCkRST1AgVEFCTEUgI1Bvd2VyU2hlbGxPdXRwdXQ7DQpEUk9QIFRBQkxFICNTZXJ2ZXJMb2dpbnM="""